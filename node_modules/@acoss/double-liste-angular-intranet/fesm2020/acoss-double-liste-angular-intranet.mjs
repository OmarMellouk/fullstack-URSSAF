import * as i0 from '@angular/core';
import { Injectable, Component, Input, NgModule } from '@angular/core';
import * as i1 from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

class DoubleListeService {
    constructor() { }
}
DoubleListeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DoubleListeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DoubleListeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DoubleListeService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DoubleListeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class DoubleListeComponent {
    constructor(fb) {
        this.fb = fb;
        this.height = '100%';
        this.width = '100%';
        this._listeSource = [];
        /**
         * Liste destination, tableau de strings ou d'objets
         * En cas d'objet, définir la clef lockList à true permet d'empêcher un changement de liste
         */
        this.listeDestination = [];
        // Permet d'activer ou non le tri de la liste source
        this.sortSource = false;
        this.activateMoveToDestionationButton = false;
        this.activateMoveToSourceButton = false;
        this.activateDestinationButton = false;
        this.disabledMoveTopButton = false;
        this.disabledMoveBottomButton = false;
        this.doubleListeForm = this.fb.group({
            source: [],
            destination: []
        });
    }
    /**
     * Liste source, tableau de strings ou d'objets
     * En cas d'objet, définir la clef lockList à true permet d'empêcher un changement de liste
     */
    set listeSource(liste) {
        this._listeSource = liste;
        this.handleSort();
    }
    get listeSource() {
        this.handleSort();
        return this._listeSource;
    }
    ngOnInit() { }
    sourceSelect(event) {
        this.activateMoveToDestionationButton = this.listeSource.length > 0 &&
            this.doubleListeForm.value.source && this.doubleListeForm.value.source.length > 0;
        // Disable l'icône dans l'élément doit être verrouillé dans cette liste
        const index = event.target.index;
        if (this.listeSource[index]?.lockList) {
            this.activateMoveToDestionationButton = false;
        }
        this.activateMoveToSourceButton = false;
        this.activateDestinationButton = false;
    }
    destinationSelect(event) {
        this.activateDestinationButton = this.listeDestination.length > 1 &&
            this.doubleListeForm.value.destination && this.doubleListeForm.value.destination.length > 0;
        this.activateMoveToSourceButton = this.listeDestination.length > 0 &&
            this.doubleListeForm.value.destination && this.doubleListeForm.value.destination.length > 0;
        // Disable l'icône dans l'élément doit être verrouillé dans cette liste
        const index = event.target.index;
        if (this.listeDestination[index]?.lockList) {
            this.activateMoveToSourceButton = false;
        }
        this.activateMoveToDestionationButton = false;
        this.checkDestinationButtons();
    }
    moveAllToDestination() {
        const tmpList = [];
        this.listeSource.forEach((elem, index) => {
            if (!elem.lockList) {
                // Push les éléments pouvant être déplacés
                this.listeDestination.push(elem);
                // Garde en mémoire leur index pour suppression
                tmpList.push(index);
            }
        });
        // Supprime les éléments déplacés
        for (let i = tmpList.length - 1; i >= 0; i--) {
            this.listeSource.splice(tmpList[i], 1);
        }
        this.activateMoveToDestionationButton = false;
        this.activateMoveToSourceButton = false;
    }
    moveAllToSource() {
        const tmpList = [];
        this.listeDestination.forEach((elem, index) => {
            if (!elem.lockList) {
                // Push les éléments pouvant être déplacés
                this.listeSource.push(elem);
                // Garde en mémoire leur index pour suppression
                tmpList.push(index);
            }
        });
        // Supprime les éléments déplacés
        for (let i = tmpList.length - 1; i >= 0; i--) {
            this.listeDestination.splice(tmpList[i], 1);
        }
        this.handleSort();
        this.activateMoveToDestionationButton = false;
        this.activateMoveToSourceButton = false;
    }
    moveToDestionation() {
        this.move(this.doubleListeForm.value.source, this.listeSource, this.listeDestination);
        this.activateMoveToDestionationButton = false;
    }
    moveToSource() {
        this.move(this.doubleListeForm.value.destination, this.listeDestination, this.listeSource);
        this.activateMoveToSourceButton = false;
        this.handleSort();
    }
    move(formControl, source, dest) {
        formControl.forEach(value => {
            // Uniquement dans le cas où l'élément n'est pas verrouillé
            if (!value.lockList) {
                const index = source.indexOf(value);
                if (index >= 0) {
                    source.splice(index, 1).forEach(element => dest.push(element));
                }
            }
        });
        this.doubleListeForm.setValue({
            source: [],
            destination: []
        });
    }
    // pour vérifier si l'élément passé en paramètre est séléctionné ou pas
    isSelected(value) {
        let isSelected = false;
        if (this.doubleListeForm.value.destination.includes(value)) {
            isSelected = true;
        }
        return isSelected;
    }
    moveToBottom() {
        const iterationList = Array.from(this.listeDestination);
        iterationList.forEach(value => {
            if (this.isSelected(value)) {
                const index = this.listeDestination.indexOf(value);
                if (index >= 0 && index < this.listeDestination.length) {
                    this.listeDestination.splice(index, 1);
                    this.listeDestination.splice(this.listeDestination.length, 0, value);
                }
            }
        });
        this.checkDestinationButtons();
    }
    moveToTop() {
        const reversedList = Array.from(this.listeDestination).reverse();
        reversedList.forEach(value => {
            if (this.isSelected(value)) {
                const index = this.listeDestination.indexOf(value);
                if (index >= 0 && index < this.listeDestination.length) {
                    this.listeDestination.splice(index, 1);
                    this.listeDestination.splice(0, 0, value);
                }
            }
        });
        this.checkDestinationButtons();
    }
    moveOneStep(list) {
        list.forEach(value => {
            const i = list.indexOf(value);
            if (this.isSelected(value) && !this.isSelected(list[i - 1]) && i > 0) {
                const tmp = list[i - 1];
                list[i - 1] = list[i];
                list[i] = tmp;
            }
        });
    }
    moveUp() {
        this.moveOneStep(this.listeDestination);
        this.checkDestinationButtons();
    }
    moveDown() {
        this.moveOneStep(this.listeDestination.reverse());
        this.listeDestination.reverse();
        this.checkDestinationButtons();
    }
    /**
     * Effectue un tri de la liste source si le tri est activé
     */
    handleSort() {
        if (this.sortSource && this._listeSource !== undefined) {
            this._listeSource.sort((a, b) => {
                // Dans le cas d'un objet, utilise la clef voulue
                if (typeof a === 'object') {
                    return a[this.keyToDisplay].localeCompare(b[this.keyToDisplay], 'fr', { ignorePunctuation: true });
                }
                else {
                    return a.localeCompare(b, 'fr', { ignorePunctuation: true });
                }
            });
        }
    }
    /**
     * Vérifie à chaque mouvement de haut en bas, de bas en haut et à chaque sélection dans la liste de destination
     * Si les boutons haut/bas doivent être activé ou non
     */
    checkDestinationButtons() {
        const lastSelectedIndex = this.doubleListeForm.value.destination?.length - 1;
        const lastIndex = this.listeDestination.length - 1;
        // Vérifie si la première valeur de la sélection correspond à la première valeur de la liste
        if (this.doubleListeForm.value.destination && this.doubleListeForm.value.destination[0] === this.listeDestination[0]) {
            this.disabledMoveTopButton = true;
        }
        else {
            this.disabledMoveTopButton = false;
        }
        // Vérifie si la dernière valeur de la sélection correspond à la dernière valeur de la liste
        if (this.doubleListeForm.value.destination && this.doubleListeForm.value.destination[lastSelectedIndex] === this.listeDestination[lastIndex]) {
            this.disabledMoveBottomButton = true;
        }
        else {
            this.disabledMoveBottomButton = false;
        }
    }
}
DoubleListeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DoubleListeComponent, deps: [{ token: i1.UntypedFormBuilder }], target: i0.ɵɵFactoryTarget.Component });
DoubleListeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.0", type: DoubleListeComponent, selector: "lib-double-liste", inputs: { height: "height", width: "width", listeSource: "listeSource", listeDestination: "listeDestination", sortSource: "sortSource", keyToDisplay: "keyToDisplay" }, ngImport: i0, template: "<div class=\"d-flex\" [formGroup]=\"doubleListeForm\">\n  <div class=\"select-container\">\n    <select multiple class=\"form-select\" [style.height]=\"height\" [style.width]=\"width\" (click)=\"sourceSelect($event)\" formControlName=\"source\">\n      <option *ngFor=\"let elementSource of listeSource\" [value]=\"elementSource\">{{keyToDisplay ? elementSource[keyToDisplay] : elementSource}} {{elementSource.lockList ? '*' : '' }}</option>\n    </select>\n  </div>\n\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <button class=\"btn\" [disabled]=\"listeDestination.length === 0\" title=\"Tout envoyer \u00E0 gauche\"\n      (click)=\"moveAllToSource()\">\n      <i class=\"icon-b_fullleft\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"!activateMoveToSourceButton\" title=\"Envoyer s\u00E9lection \u00E0 gauche\"\n      (click)=\"moveToSource()\">\n      <i class=\"icon-b_left\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"!activateMoveToDestionationButton\" title=\"Envoyer s\u00E9lection \u00E0 droite\"\n      (click)=\"moveToDestionation()\">\n      <i class=\"icon-b_right\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"listeSource.length === 0\" title=\"Tout envoyer \u00E0 droite\"\n      (click)=\"moveAllToDestination()\">\n      <i class=\"icon-b_fullright\" aria-hidden=\"true\"></i>\n    </button>\n  </div>\n\n  <div class=\"select-container\">\n    <select multiple class=\"form-select\" [style.height]=\"height\" [style.width]=\"width\" (click)=\"destinationSelect($event)\" formControlName=\"destination\">\n      <option *ngFor=\"let elementDestination of listeDestination\" [value]=\"elementDestination\">{{keyToDisplay ? elementDestination[keyToDisplay] : elementDestination}} {{elementDestination.lockList ? '*' : '' }}\n      </option>\n    </select>\n  </div>\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <button class=\"btn\" [disabled]=\"!activateDestinationButton || disabledMoveTopButton\" title=\"Envoyer s\u00E9lection en haut\"\n      (click)=\"moveToTop()\">\n      <i class=\"icon-b_top\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"!activateDestinationButton || disabledMoveTopButton\" (click)=\"moveUp()\" title=\"Monter s\u00E9lection\">\n      <i class=\"icon-b_up\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"!activateDestinationButton || disabledMoveBottomButton\" (click)=\"moveDown()\" title=\"Descendre s\u00E9lection\">\n      <i class=\"icon-b_down\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"!activateDestinationButton || disabledMoveBottomButton\" (click)=\"moveToBottom()\" title=\"Envoyer s\u00E9lection en bas\">\n      <i class=\"icon-b_bottom\" aria-hidden=\"true\"></i>\n    </button>\n  </div>\n</div>\n", styles: [".select-container{display:flex;padding-right:1.143rem;padding-left:1.143rem}.btn{height:2.286rem;width:2.286rem;flex:none;background-color:#fff;border-color:#2461bb;margin-bottom:.5rem;border-radius:0;padding:0 .357rem;display:flex}.btn:hover{color:#2461bb;background:rgba(36,97,187,.1019607843);border-color:#2461bb}.btn i{margin:auto}.btn:focus-visible,.btn.focus-visible{box-shadow:0 0 0 .2rem #828a9180}.form-select{border-color:silver;background-color:#fff;color:#000;font-family:Segoe UI,Sans-serif;font-size:.929rem;padding:0;overflow:auto}select option :checked{background:#E8E8E8!important}select option{height:2.071rem;padding:.357rem .5rem}.icon-b_fullleft,.icon-b_left,.icon-b_right,.icon-b_fullright,.icon-b_top,.icon-b_bottom,.icon-b_up,.icon-b_down{font-size:1.429rem}.icon-b_fullleft:before,.icon-b_left:before,.icon-b_right:before,.icon-b_fullright:before,.icon-b_top:before,.icon-b_bottom:before,.icon-b_up:before,.icon-b_down:before{color:#2461bb}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i1.SelectMultipleControlValueAccessor, selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DoubleListeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-double-liste', template: "<div class=\"d-flex\" [formGroup]=\"doubleListeForm\">\n  <div class=\"select-container\">\n    <select multiple class=\"form-select\" [style.height]=\"height\" [style.width]=\"width\" (click)=\"sourceSelect($event)\" formControlName=\"source\">\n      <option *ngFor=\"let elementSource of listeSource\" [value]=\"elementSource\">{{keyToDisplay ? elementSource[keyToDisplay] : elementSource}} {{elementSource.lockList ? '*' : '' }}</option>\n    </select>\n  </div>\n\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <button class=\"btn\" [disabled]=\"listeDestination.length === 0\" title=\"Tout envoyer \u00E0 gauche\"\n      (click)=\"moveAllToSource()\">\n      <i class=\"icon-b_fullleft\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"!activateMoveToSourceButton\" title=\"Envoyer s\u00E9lection \u00E0 gauche\"\n      (click)=\"moveToSource()\">\n      <i class=\"icon-b_left\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"!activateMoveToDestionationButton\" title=\"Envoyer s\u00E9lection \u00E0 droite\"\n      (click)=\"moveToDestionation()\">\n      <i class=\"icon-b_right\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"listeSource.length === 0\" title=\"Tout envoyer \u00E0 droite\"\n      (click)=\"moveAllToDestination()\">\n      <i class=\"icon-b_fullright\" aria-hidden=\"true\"></i>\n    </button>\n  </div>\n\n  <div class=\"select-container\">\n    <select multiple class=\"form-select\" [style.height]=\"height\" [style.width]=\"width\" (click)=\"destinationSelect($event)\" formControlName=\"destination\">\n      <option *ngFor=\"let elementDestination of listeDestination\" [value]=\"elementDestination\">{{keyToDisplay ? elementDestination[keyToDisplay] : elementDestination}} {{elementDestination.lockList ? '*' : '' }}\n      </option>\n    </select>\n  </div>\n  <div class=\"btn-group-vertical\" role=\"group\">\n    <button class=\"btn\" [disabled]=\"!activateDestinationButton || disabledMoveTopButton\" title=\"Envoyer s\u00E9lection en haut\"\n      (click)=\"moveToTop()\">\n      <i class=\"icon-b_top\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"!activateDestinationButton || disabledMoveTopButton\" (click)=\"moveUp()\" title=\"Monter s\u00E9lection\">\n      <i class=\"icon-b_up\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"!activateDestinationButton || disabledMoveBottomButton\" (click)=\"moveDown()\" title=\"Descendre s\u00E9lection\">\n      <i class=\"icon-b_down\" aria-hidden=\"true\"></i>\n    </button>\n    <button class=\"btn\" [disabled]=\"!activateDestinationButton || disabledMoveBottomButton\" (click)=\"moveToBottom()\" title=\"Envoyer s\u00E9lection en bas\">\n      <i class=\"icon-b_bottom\" aria-hidden=\"true\"></i>\n    </button>\n  </div>\n</div>\n", styles: [".select-container{display:flex;padding-right:1.143rem;padding-left:1.143rem}.btn{height:2.286rem;width:2.286rem;flex:none;background-color:#fff;border-color:#2461bb;margin-bottom:.5rem;border-radius:0;padding:0 .357rem;display:flex}.btn:hover{color:#2461bb;background:rgba(36,97,187,.1019607843);border-color:#2461bb}.btn i{margin:auto}.btn:focus-visible,.btn.focus-visible{box-shadow:0 0 0 .2rem #828a9180}.form-select{border-color:silver;background-color:#fff;color:#000;font-family:Segoe UI,Sans-serif;font-size:.929rem;padding:0;overflow:auto}select option :checked{background:#E8E8E8!important}select option{height:2.071rem;padding:.357rem .5rem}.icon-b_fullleft,.icon-b_left,.icon-b_right,.icon-b_fullright,.icon-b_top,.icon-b_bottom,.icon-b_up,.icon-b_down{font-size:1.429rem}.icon-b_fullleft:before,.icon-b_left:before,.icon-b_right:before,.icon-b_fullright:before,.icon-b_top:before,.icon-b_bottom:before,.icon-b_up:before,.icon-b_down:before{color:#2461bb}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.UntypedFormBuilder }]; }, propDecorators: { height: [{
                type: Input
            }], width: [{
                type: Input
            }], listeSource: [{
                type: Input
            }], listeDestination: [{
                type: Input
            }], 
        // Permet d'activer ou non le tri de la liste source
        sortSource: [{
                type: Input
            }], keyToDisplay: [{
                type: Input
            }] } });

class DoubleListeModule {
}
DoubleListeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DoubleListeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
DoubleListeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.1.0", ngImport: i0, type: DoubleListeModule, declarations: [DoubleListeComponent], imports: [CommonModule,
        ReactiveFormsModule], exports: [DoubleListeComponent] });
DoubleListeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DoubleListeModule, imports: [CommonModule,
        ReactiveFormsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DoubleListeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule
                    ],
                    declarations: [DoubleListeComponent],
                    exports: [DoubleListeComponent]
                }]
        }] });

/*
 * Public API Surface of double-liste
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DoubleListeComponent, DoubleListeModule, DoubleListeService };
//# sourceMappingURL=acoss-double-liste-angular-intranet.mjs.map
