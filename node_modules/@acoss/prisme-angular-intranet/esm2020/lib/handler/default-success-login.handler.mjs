import { Inject, Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { PrismeAngularConfiguration } from '../prisme-angular.config';
import { AbstractSuccessLoginHandler } from './abstract-success-login.handler';
import * as i0 from "@angular/core";
import * as i1 from "../prisme-angular-init.config";
import * as i2 from "../prisme-angular.config";
export class DefaultSuccessLoginHandler extends AbstractSuccessLoginHandler {
    constructor(environment, initConfig) {
        // Appel du constrcuteur du parent
        super();
        this.environment = environment;
        this.initConfig = initConfig;
        // Test des paramètres obligatoires
        if (!this.initConfig.cleStockagePageFrom) {
            throwError('Paramètre manquant : cleStockagePageFrom. Est t-il bien présent dans le fichier environnement.ts ?');
        }
        if (!this.environment.pageApresConnexion) {
            throwError('Paramètre manquant : pageApresConnexion. Est t-il bien présent dans le fichier environnement.ts ?');
        }
    }
    postSuccessLogin() {
        // Méthode à surcharger permettant d'ajouter un comportement après l'authentification
        console.log('Dans DefaultSuccessLoginHandler');
    }
}
DefaultSuccessLoginHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DefaultSuccessLoginHandler, deps: [{ token: PrismeAngularConfiguration }, { token: i1.PrismeAngularInitConfig }], target: i0.ɵɵFactoryTarget.Injectable });
DefaultSuccessLoginHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DefaultSuccessLoginHandler });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: DefaultSuccessLoginHandler, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i2.PrismeAngularConfiguration, decorators: [{
                    type: Inject,
                    args: [PrismeAngularConfiguration]
                }] }, { type: i1.PrismeAngularInitConfig }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1zdWNjZXNzLWxvZ2luLmhhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hY29zcy9wcmlzbWUtYW5ndWxhci1pbnRyYW5ldC9zcmMvbGliL2hhbmRsZXIvZGVmYXVsdC1zdWNjZXNzLWxvZ2luLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVsQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQUcvRSxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsMkJBQTJCO0lBR3ZFLFlBQTJELFdBQXVDLEVBQ3hGLFVBQW1DO1FBQzNDLGtDQUFrQztRQUNsQyxLQUFLLEVBQUUsQ0FBQztRQUhpRCxnQkFBVyxHQUFYLFdBQVcsQ0FBNEI7UUFDeEYsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFJM0MsbUNBQW1DO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixFQUFFO1lBQ3hDLFVBQVUsQ0FBQyxvR0FBb0csQ0FBQyxDQUFDO1NBQ2xIO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsa0JBQWtCLEVBQUU7WUFDeEMsVUFBVSxDQUFDLG1HQUFtRyxDQUFDLENBQUM7U0FDakg7SUFFSCxDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QscUZBQXFGO1FBQ3JGLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLENBQUMsQ0FBQztJQUNqRCxDQUFDOzt1SEFyQlEsMEJBQTBCLGtCQUdkLDBCQUEwQjsySEFIdEMsMEJBQTBCOzJGQUExQiwwQkFBMEI7a0JBRHRDLFVBQVU7OzBCQUlPLE1BQU07MkJBQUMsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBQcmlzbWVBbmd1bGFySW5pdENvbmZpZyB9IGZyb20gJy4uL3ByaXNtZS1hbmd1bGFyLWluaXQuY29uZmlnJztcbmltcG9ydCB7IFByaXNtZUFuZ3VsYXJDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vcHJpc21lLWFuZ3VsYXIuY29uZmlnJztcbmltcG9ydCB7IEFic3RyYWN0U3VjY2Vzc0xvZ2luSGFuZGxlciB9IGZyb20gJy4vYWJzdHJhY3Qtc3VjY2Vzcy1sb2dpbi5oYW5kbGVyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERlZmF1bHRTdWNjZXNzTG9naW5IYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RTdWNjZXNzTG9naW5IYW5kbGVyIHtcblxuXG4gICAgY29uc3RydWN0b3IoIEBJbmplY3QoUHJpc21lQW5ndWxhckNvbmZpZ3VyYXRpb24pIHByb3RlY3RlZCBlbnZpcm9ubWVudDogUHJpc21lQW5ndWxhckNvbmZpZ3VyYXRpb24sXG4gICAgcHJvdGVjdGVkIGluaXRDb25maWc6IFByaXNtZUFuZ3VsYXJJbml0Q29uZmlnKSB7XG4gICAgICAvLyBBcHBlbCBkdSBjb25zdHJjdXRldXIgZHUgcGFyZW50XG4gICAgICBzdXBlcigpO1xuXG4gICAgICAvLyBUZXN0IGRlcyBwYXJhbcOodHJlcyBvYmxpZ2F0b2lyZXNcbiAgICAgIGlmICghdGhpcy5pbml0Q29uZmlnLmNsZVN0b2NrYWdlUGFnZUZyb20pIHtcbiAgICAgICAgdGhyb3dFcnJvcignUGFyYW3DqHRyZSBtYW5xdWFudCA6IGNsZVN0b2NrYWdlUGFnZUZyb20uIEVzdCB0LWlsIGJpZW4gcHLDqXNlbnQgZGFucyBsZSBmaWNoaWVyIGVudmlyb25uZW1lbnQudHMgPycpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmVudmlyb25tZW50LnBhZ2VBcHJlc0Nvbm5leGlvbikge1xuICAgICAgICB0aHJvd0Vycm9yKCdQYXJhbcOodHJlIG1hbnF1YW50IDogcGFnZUFwcmVzQ29ubmV4aW9uLiBFc3QgdC1pbCBiaWVuIHByw6lzZW50IGRhbnMgbGUgZmljaGllciBlbnZpcm9ubmVtZW50LnRzID8nKTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIHBvc3RTdWNjZXNzTG9naW4oKSB7XG4gICAgICAvLyBNw6l0aG9kZSDDoCBzdXJjaGFyZ2VyIHBlcm1ldHRhbnQgZCdham91dGVyIHVuIGNvbXBvcnRlbWVudCBhcHLDqHMgbCdhdXRoZW50aWZpY2F0aW9uXG4gICAgICBjb25zb2xlLmxvZygnRGFucyBEZWZhdWx0U3VjY2Vzc0xvZ2luSGFuZGxlcicpO1xuICAgIH1cblxufVxuIl19