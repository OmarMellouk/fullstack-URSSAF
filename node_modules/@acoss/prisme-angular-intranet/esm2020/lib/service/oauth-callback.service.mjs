import { HttpHeaders } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { PrismeAngularConfiguration } from '../prisme-angular.config';
import * as i0 from "@angular/core";
import * as i1 from "./oauth.service";
import * as i2 from "./login.service";
import * as i3 from "./oauth-validation.service";
import * as i4 from "@angular/common/http";
import * as i5 from "./access-token.service";
import * as i6 from "../prisme-angular.config";
const ALGO_VALIDATION = 'RS512';
export class OauthCallbackService {
    constructor(environment, oauthService, loginService, oauthValidationService, http, accessTokenService) {
        this.environment = environment;
        this.oauthService = oauthService;
        this.loginService = loginService;
        this.oauthValidationService = oauthValidationService;
        this.http = http;
        this.accessTokenService = accessTokenService;
    }
    handleFragment(fragment, callBackSucces, callBackErreur) {
        // Parsing du fragment (séparation des champs)
        const champs = decodeURIComponent(fragment).split('&');
        const params = [];
        champs.forEach(function (value) {
            // Parsing des champs du fragment
            if (value.indexOf('=') !== -1) {
                const champ_tokens = value.split('=');
                params[champ_tokens[0]] = champ_tokens[1];
            }
        });
        // Récupération Access Token
        const access_token_str = params['access_token'];
        const ocean_token_str = params['data'];
        // Si tout s'est bien passé, on a l'un des 2 jetons
        if (access_token_str) {
            const state = params['state'];
            let mode_authentification = '';
            if (state) {
                // si on a un state alors on est dans la cynématique implicit
                // Voir OauthService.authentificationFrontUrl
                mode_authentification = 'implicit';
                // Si le fragment vient de la mire PSS alors on peut le valider
                if (state !== this.oauthService.getLastState()) {
                    console.error('State invalide, il ne correspond pas à la requête.');
                    callBackErreur();
                    return Promise.reject(new Error('StateInvalid'));
                }
            }
            else {
                mode_authentification = 'portail';
            }
            return this.handleAccessToken(access_token_str, mode_authentification, callBackSucces, callBackErreur);
        }
        else if (ocean_token_str) {
            return this.handleJetonOcean(ocean_token_str, callBackSucces, callBackErreur);
        }
        else {
            // Sinon il y a eu une erreur
            console.error('Erreur pendant la récupération du jeton d\'accès FRONT depuis le portail : jeton non trouvé');
            callBackErreur();
        }
    }
    handleAccessToken(access_token_front_str, mode_authentification, callBackSucces, callBackErreur) {
        return new Promise((resolve, reject) => {
            const headers = new HttpHeaders();
            headers.append('Content-type', 'application/json');
            const options = { headers: headers };
            let identifiantUtilisateur = '';
            try {
                identifiantUtilisateur = this.accessTokenService.getIdentifiantUtilisateur(access_token_front_str);
            }
            catch (err) {
                // Traitement en cas d'erreur decodage du jeton
                callBackErreur();
                reject(err);
            }
            // Validation du jeton - Récupération des clés
            this.http.get(this.environment.prismeKeysEndpoint).subscribe((keysResult) => {
                this.pssPublicKeys = keysResult.keys;
                // On peut maintenant échanger le jeton FRONT contre un jeton BACK
                this.http.post(this.environment.prismeTokenEndpoint, this.oauthService.authentificationBackAssertionJwt(access_token_front_str), options).subscribe((body) => {
                    // Récupération du jeton
                    const access_token_back_str = body.access_token;
                    // Validation
                    if (!this.validateJeton(access_token_back_str, this.pssPublicKeys)) {
                        callBackErreur();
                        resolve('erreur');
                        return;
                    }
                    // Mise à jour de la valeur d'expiration
                    const expirationTime = this.calculateExpirationTime(body.expires_in);
                    const tokenData = {
                        accessTokenBack: access_token_back_str,
                        accessTokenFront: access_token_front_str,
                        oceanToken: null,
                        expiration: expirationTime,
                        infosUtilisateurFront: null,
                        infosUtilisateurBack: null,
                        mode: mode_authentification,
                        payload: null
                    };
                    this.loginService.storeInfos(tokenData);
                    // Appel du service user-infos pour avoir les infos utilisateur bak
                    this.updateInfosUtilisateur(identifiantUtilisateur, callBackSucces, callBackErreur, resolve);
                }, (err) => {
                    console.error('Erreur pendant l\'authentification : échec du JWT Assertion');
                    if (err.error) {
                        console.error('[ ' + err.error.error_code + ' ] ' + err.error.error_message);
                    }
                    callBackErreur();
                    resolve('erreur');
                });
            }, (err) => {
                console.error('Erreur lors de la récupération des clés publiques PSS');
                console.error(err);
                callBackErreur();
                resolve('erreur');
            });
        });
    }
    /**
     * Traitement du jeton
     * @param ocean_token_str Jeton
     * @param callBackSucces Méthode si traitement OK
     * @param callBackErreur Méthode si traitement KO
     */
    handleJetonOcean(ocean_token_str, callBackSucces, callBackErreur) {
        return new Promise((resolve, reject) => {
            /** On l'échange contre un jeton front */
            const headers = new HttpHeaders();
            headers.append('Content-type', 'application/json');
            const options = { headers: headers };
            this.http.post(this.environment.prismeTokenEndpoint, this.oauthService.authentificationFrontAssertionOcean(ocean_token_str), options).subscribe((bodyFront) => {
                // Récupération du jeton
                const access_token_front_str = bodyFront.access_token;
                const access_token_front_decode = this.accessTokenService.decodeAccessToken(access_token_front_str);
                // Validation du jeton - Récupération des clés
                this.http.get(this.environment.prismeKeysEndpoint).subscribe((keysResult) => {
                    this.pssPublicKeys = keysResult.keys;
                    // Validation du jeton
                    if (!this.validateJeton(access_token_front_str, this.pssPublicKeys)) {
                        callBackErreur();
                        resolve('erreur');
                        return;
                    }
                    if (!this.oauthValidationService.validerSubOcean(access_token_front_decode, this.environment.prismeClientId)) {
                        console.error('Contrôle du jeton d\'accès FRONT : SUB non valide');
                        callBackErreur();
                        resolve('erreur');
                        return;
                    }
                    // On peut maintenant échanger le jeton FRONT contre un jeton BACK
                    this.http.post(this.environment.prismeTokenEndpoint, this.oauthService.authentificationBackAssertionJwt(access_token_front_str), options).subscribe((bodyBack) => {
                        // Récupération du jeton
                        const access_token_back_str = bodyBack.access_token;
                        // Validation du jeton
                        if (!this.validateJeton(access_token_back_str, this.pssPublicKeys)) {
                            callBackErreur();
                            resolve('erreur');
                            return;
                        }
                        // Mise à jour de la valeur d'expiration
                        const expirationTime = this.calculateExpirationTime(bodyBack.expires_in);
                        // Login
                        const tokenData = {
                            accessTokenBack: access_token_back_str,
                            accessTokenFront: access_token_front_str,
                            oceanToken: ocean_token_str,
                            expiration: expirationTime,
                            infosUtilisateurFront: null,
                            infosUtilisateurBack: null,
                            mode: 'ocean',
                            payload: null
                        };
                        this.loginService.storeInfos(tokenData);
                        // Appel du service user-infos pour avoir les infos utilisateur
                        const identifiantUtilisateur = this.accessTokenService.getIdentifiantUtilisateur(access_token_front_str);
                        this.updateInfosUtilisateur(identifiantUtilisateur, callBackSucces, callBackErreur, resolve);
                    }, (err) => {
                        console.error('Erreur pendant l\'authentification : échec du JWT Assertion');
                        if (err.error_message) {
                            console.error('[ ' + err.error_code + ' ] ' + err.error_message);
                        }
                        callBackErreur();
                        resolve('erreur');
                    });
                }, (err) => {
                    console.error('Erreur lors de la récupération des clés publiques PSS');
                    console.error(err);
                    callBackErreur();
                    resolve('erreur');
                });
            }, (err) => {
                console.error('Erreur HTTP');
                console.error(err);
                callBackErreur();
                resolve('erreur');
            });
        });
    }
    /**
     * Méthode de renovellement d'un jeton
     * @param access_token_front_str le jeton à renouveller
     */
    renewAccessTokenPortail(access_token_front_str) {
        return new Promise((resolve, reject) => {
            if (this.pssPublicKeys) {
                this.renewAccessToken(access_token_front_str, this.pssPublicKeys, resolve, reject);
            }
            else {
                // Récupération des clés pour valider le jeton
                this.http.get(this.environment.prismeKeysEndpoint).subscribe((keysResult) => {
                    this.pssPublicKeys = keysResult.keys;
                    this.renewAccessToken(access_token_front_str, this.pssPublicKeys, resolve, reject);
                }, (err) => {
                    console.error('Erreur lors de la récupération des clés publiques PSS');
                    console.error(err);
                    // Rejet de la promise pour stopper le rafraichissement car on a une erreur
                    reject(err);
                });
            }
        });
    }
    /**
     * Méthode de renovellement d'un jeton
     * @param access_token_front_str  le jeton à renouveller
     * @param publicKeys les clés pour valider le jeton
     * @param resolve méthode pour indiquer que le renouvellement est terminé
     * @param reject méthode pour indiquer qu'une erreur est survenue lors du renouvellement
     */
    renewAccessToken(access_token_front_str, publicKeys, resolve, reject) {
        // On peut maintenant échanger le jeton FRONT contre un jeton BACK
        const headers = new HttpHeaders();
        headers.append('Content-type', 'application/json');
        const options = { headers: headers };
        this.http.post(this.environment.prismeTokenEndpoint, this.oauthService.authentificationBackAssertionJwt(access_token_front_str), options).subscribe((body) => {
            // Récupération du jeton
            const access_token_back_str = body.access_token;
            // Validation
            if (!this.validateJeton(access_token_back_str, publicKeys)) {
                reject('jeton invalide');
            }
            // Mise à jour de la valeur d'expiration
            const expirationTime = this.calculateExpirationTime(body.expires_in);
            this.loginService.updateAccessToken(access_token_back_str, expirationTime);
            // Resolve de la promise pour indiquer que le refresh est ok
            resolve(true);
        }, (err) => {
            console.error('Erreur pendant l\'authentification : échec du JWT Assertion');
            if (err.error) {
                console.error('[ ' + err.error.error_code + ' ] ' + err.error.error_message);
            }
            // Rejet de la promise pour stopper le rafraichissement car on a une erreur
            reject(err);
        });
    }
    /**
     * Validation du jeton : voir la documentation JWT Assertion
     * @param access_token_back_str le jeton
     * @param access_token_back_decode le jeton décodé
     * @param publicKeys les clés
     */
    validateJeton(access_token_back_str, publicKeys) {
        const access_token_back_decode = this.accessTokenService.decodeAccessToken(access_token_back_str);
        // Validation du jeton : voir la documentation JWT Assertion
        if (!this.oauthValidationService.validerIss(access_token_back_decode)) {
            console.error('Contrôle du jeton d\'accès : ISS non valide');
            return false;
        }
        if (!this.oauthValidationService.validerExp(access_token_back_decode)) {
            console.error('Contrôle du jeton d\'accès : EXP non valide');
            return false;
        }
        if (!this.oauthValidationService.validerAudNonVide(access_token_back_decode)) {
            console.error('Contrôle du jeton d\'accès : AUD non valide');
            return false;
        }
        if (!this.oauthValidationService.validerSignature(access_token_back_str, publicKeys, ALGO_VALIDATION)) {
            console.error('Contrôle du jeton d\'accès : Signature non valide');
            return false;
        }
        return true;
    }
    /**
     * calcule la date d'expiration du jeton
     * @param expiresInNum la durée de validité du jeton
     */
    calculateExpirationTime(expiresInNum) {
        const expirationDate = new Date();
        expirationDate.setSeconds(expirationDate.getSeconds() + expiresInNum);
        return expirationDate;
    }
    /**
     * Met à jour les données utilisateur en utilisateur le service user-infos
     * @param identifiantUtilisateur le user
     * @param callBackSucces le callback si tout est ok
     * @param callBackErreur le callback d'erreur
     * @param resolve provient de la promise retournée par ce service OauthCallbackService
     */
    updateInfosUtilisateur(identifiantUtilisateur, callBackSucces, callBackErreur, resolve) {
        if (this.environment.chargerUserInfosBack) {
            this.getUserInfoObservable(identifiantUtilisateur, this.loginService.getAccessTokenBack()).subscribe(bodyUser => {
                this.loginService.updateInfosUtilisateurBack(bodyUser);
                if (this.environment.chargerUserInfosFront) {
                    this.updateInfosUtilisateurFront(identifiantUtilisateur, callBackSucces, callBackErreur, resolve);
                }
                else {
                    callBackSucces();
                    resolve('sucess');
                }
            }, err => this.handlerUserInfoError(err, callBackErreur, resolve));
        }
        else if (this.environment.chargerUserInfosFront) {
            this.updateInfosUtilisateurFront(identifiantUtilisateur, callBackSucces, callBackErreur, resolve);
        }
        else {
            callBackSucces();
            resolve('sucess');
        }
    }
    /**
     * Permet de réaliser un appel à user-info avec uun access token front et de mettre à jour les informations utilisateur
     * @param identifiantUtilisateur le user
     * @param callBackSucces le callback si tout est ok
     * @param callBackErreur le callback d'erreur
     * @param resolve provient de la promise retournée par ce service OauthCallbackService
     */
    updateInfosUtilisateurFront(identifiantUtilisateur, callBackSucces, callBackErreur, resolve) {
        this.getUserInfoObservable(identifiantUtilisateur, this.loginService.getAccessTokenFront()).subscribe(result => {
            this.loginService.updateInfosUtilisateurFront(result);
            callBackSucces();
            resolve('sucess');
        }, err => this.handlerUserInfoError(err, callBackErreur, resolve));
    }
    /**
     * Permet de réaliser l'appel au service user-ifnos
     * @param identifiantUtilisateur le user
     * @param token le token d'authentification
     */
    getUserInfoObservable(identifiantUtilisateur, token) {
        const requestHeaders = {
            headers: new HttpHeaders({
                'Content-type': 'application/json',
                'Authorization': 'Bearer ' + token
            })
        };
        return this.http.post(this.environment.prismeUserEndpoint, { 'username': identifiantUtilisateur }, requestHeaders);
    }
    /**
     * Permet de gérer les messages d'erreurs du service user-infos
     * @param err le message de retour du service
     * @param callBackErreur le callback d'erreur
     * @param resolve provient de la promise retournée par ce service OauthCallbackService
     */
    handlerUserInfoError(err, callBackErreur, resolve) {
        console.error('Erreur pendant l\'authentification : échec du user-info');
        if (err.error) {
            console.error('[ ' + err.error.error_code + ' ] ' + err.error.error_message);
        }
        callBackErreur();
        resolve('erreur');
    }
}
OauthCallbackService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: OauthCallbackService, deps: [{ token: PrismeAngularConfiguration }, { token: i1.OauthService }, { token: i2.LoginService }, { token: i3.OauthValidationService }, { token: i4.HttpClient }, { token: i5.AccessTokenService }], target: i0.ɵɵFactoryTarget.Injectable });
OauthCallbackService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: OauthCallbackService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: OauthCallbackService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i6.PrismeAngularConfiguration, decorators: [{
                    type: Inject,
                    args: [PrismeAngularConfiguration]
                }] }, { type: i1.OauthService }, { type: i2.LoginService }, { type: i3.OauthValidationService }, { type: i4.HttpClient }, { type: i5.AccessTokenService }]; } });
//# sourceMappingURL=data:application/json;base64,