import { Injectable } from '@angular/core';
import * as pako from 'pako';
import { JwtHelperService } from '@auth0/angular-jwt';
import * as i0 from "@angular/core";
/**
 * Service permettant de décoder un access token et d'en extraire les informations
 */
export class AccessTokenService {
    constructor() {
        this.jwtHelper = new JwtHelperService();
    }
    getIdentifiantUtilisateur(accessToken) {
        return this.decodeAccessToken(accessToken).sub.split('@')[0];
    }
    getDroitsUtilisateur(accessToken) {
        // La liste des droits est située dans le "aud" du jeton d'accès au format base64
        const decode_aud = atob(this.decodeAccessToken(accessToken).aud);
        // Après décodage, la chaine est gzippée : utilisation de la bibliothèque pako pour décompresser
        const droits_string = pako.inflate(decode_aud, { to: 'string' });
        // Les droits FRONT sont séparés par un espace
        return droits_string.split(' ');
    }
    decodeAccessToken(accessToken) {
        return this.jwtHelper.decodeToken(accessToken);
    }
    getTokenExpirationDate(accessToken) {
        return this.jwtHelper.getTokenExpirationDate(accessToken);
    }
    isTokenExpired(accessToken) {
        return this.jwtHelper.isTokenExpired(accessToken);
    }
}
AccessTokenService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: AccessTokenService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AccessTokenService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: AccessTokenService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: AccessTokenService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzLXRva2VuLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hY29zcy9wcmlzbWUtYW5ndWxhci1pbnRyYW5ldC9zcmMvbGliL3NlcnZpY2UvYWNjZXNzLXRva2VuLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFLdEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBSTdCO1FBQ0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7SUFDMUMsQ0FBQztJQUVNLHlCQUF5QixDQUFDLFdBQW1CO1FBQ2xELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVNLG9CQUFvQixDQUFDLFdBQW1CO1FBQzNDLGlGQUFpRjtRQUNqRixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpFLGdHQUFnRztRQUNoRyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRWpFLDhDQUE4QztRQUM5QyxPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLGlCQUFpQixDQUFDLFdBQW1CO1FBQzFDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLHNCQUFzQixDQUFDLFdBQW1CO1FBQy9DLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU0sY0FBYyxDQUFDLFdBQW1CO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7K0dBakNVLGtCQUFrQjttSEFBbEIsa0JBQWtCLGNBTGpCLE1BQU07MkZBS1Asa0JBQWtCO2tCQU45QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIHBha28gZnJvbSAncGFrbyc7XG5pbXBvcnQgeyBKd3RIZWxwZXJTZXJ2aWNlIH0gZnJvbSAnQGF1dGgwL2FuZ3VsYXItand0JztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG4vKipcbiAqIFNlcnZpY2UgcGVybWV0dGFudCBkZSBkw6ljb2RlciB1biBhY2Nlc3MgdG9rZW4gZXQgZCdlbiBleHRyYWlyZSBsZXMgaW5mb3JtYXRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBBY2Nlc3NUb2tlblNlcnZpY2Uge1xuXG4gIHByaXZhdGUgand0SGVscGVyOiBKd3RIZWxwZXJTZXJ2aWNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuand0SGVscGVyID0gbmV3IEp3dEhlbHBlclNlcnZpY2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRJZGVudGlmaWFudFV0aWxpc2F0ZXVyKGFjY2Vzc1Rva2VuOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmRlY29kZUFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuKS5zdWIuc3BsaXQoJ0AnKVswXTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREcm9pdHNVdGlsaXNhdGV1cihhY2Nlc3NUb2tlbjogc3RyaW5nKTogYW55ICB7XG4gICAgICAvLyBMYSBsaXN0ZSBkZXMgZHJvaXRzIGVzdCBzaXR1w6llIGRhbnMgbGUgXCJhdWRcIiBkdSBqZXRvbiBkJ2FjY8OocyBhdSBmb3JtYXQgYmFzZTY0XG4gICAgICBjb25zdCBkZWNvZGVfYXVkID0gYXRvYih0aGlzLmRlY29kZUFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuKS5hdWQpO1xuXG4gICAgICAvLyBBcHLDqHMgZMOpY29kYWdlLCBsYSBjaGFpbmUgZXN0IGd6aXBww6llIDogdXRpbGlzYXRpb24gZGUgbGEgYmlibGlvdGjDqHF1ZSBwYWtvIHBvdXIgZMOpY29tcHJlc3NlclxuICAgICAgY29uc3QgZHJvaXRzX3N0cmluZyA9IHBha28uaW5mbGF0ZShkZWNvZGVfYXVkLCB7IHRvOiAnc3RyaW5nJyB9KTtcblxuICAgICAgLy8gTGVzIGRyb2l0cyBGUk9OVCBzb250IHPDqXBhcsOpcyBwYXIgdW4gZXNwYWNlXG4gICAgICByZXR1cm4gZHJvaXRzX3N0cmluZy5zcGxpdCgnICcpO1xuICB9XG5cbiAgcHVibGljIGRlY29kZUFjY2Vzc1Rva2VuKGFjY2Vzc1Rva2VuOiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLmp3dEhlbHBlci5kZWNvZGVUb2tlbihhY2Nlc3NUb2tlbik7XG4gIH1cblxuICBwdWJsaWMgZ2V0VG9rZW5FeHBpcmF0aW9uRGF0ZShhY2Nlc3NUb2tlbjogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5qd3RIZWxwZXIuZ2V0VG9rZW5FeHBpcmF0aW9uRGF0ZShhY2Nlc3NUb2tlbik7XG4gIH1cblxuICBwdWJsaWMgaXNUb2tlbkV4cGlyZWQoYWNjZXNzVG9rZW46IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmp3dEhlbHBlci5pc1Rva2VuRXhwaXJlZChhY2Nlc3NUb2tlbik7XG4gIH1cblxufVxuIl19