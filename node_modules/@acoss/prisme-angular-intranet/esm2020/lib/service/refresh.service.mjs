import { Inject, Injectable } from '@angular/core';
import { Subject, timer } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { PrismeAngularConfiguration } from '../prisme-angular.config';
import * as i0 from "@angular/core";
import * as i1 from "./oauth-callback.service";
import * as i2 from "./login.service";
import * as i3 from "../prisme-angular-init.config";
import * as i4 from "../prisme-angular.config";
export class RefreshService {
    constructor(environment, oauthCallbackService, loginService, prismeAngularInitConfig) {
        this.environment = environment;
        this.oauthCallbackService = oauthCallbackService;
        this.loginService = loginService;
        this.prismeAngularInitConfig = prismeAngularInitConfig;
        this.timerSubject = new Subject();
    }
    initierRafraichissement() {
        // on s'assure que le rafraichissement ne se lance pas plusieurs fois
        this.stopperRafraichissement();
        sessionStorage.setItem(this.prismeAngularInitConfig.cleStockageEtatRafraichissement, 'O');
        this.lancerTimerRafraichissement();
    }
    /**
     * Permet de relancer rafraichissement
     * Ex : lors d'un F5 sur la page le timer est détruit
     */
    relancerRafraichissement() {
        const etatRafraichissement = sessionStorage.getItem(this.prismeAngularInitConfig.cleStockageEtatRafraichissement);
        if (etatRafraichissement === 'O' && !this.timerSubscription) {
            this.lancerTimerRafraichissement();
        }
    }
    /**
     * Création du timer qui va rafraichir le jeton au bout d'un temps donné
     */
    lancerTimerRafraichissement() {
        this.timerSubscription = timer(this.environment.prismeRefreshTokensInterval, this.environment.prismeRefreshTokensInterval)
            .pipe(takeUntil(this.timerSubject))
            .subscribe(() => {
            this.rafraichir();
        });
    }
    /**
     * Rafraichissement effectif du jeton selon le mode de connexion.
     * En cas d'erreur on arrête le service
     */
    rafraichir() {
        if (sessionStorage.getItem(this.prismeAngularInitConfig.cleStockageEtatRafraichissement) === 'O') {
            const accessToken = this.loginService.getAccessTokenBack();
            if (accessToken !== null) {
                this.oauthCallbackService.renewAccessTokenPortail(accessToken).catch(error => {
                    console.error('error refresh jeton : ' + JSON.stringify(error));
                    this.stopperRafraichissement();
                });
            }
        }
    }
    /**
     * Permet de stopper le rafraichissement du jeton
     * @returns Promise<any> renvoi resolve(true) lorsque le service est arreté
     */
    stopperRafraichissement() {
        return new Promise((resolve, reject) => {
            sessionStorage.setItem(this.prismeAngularInitConfig.cleStockageEtatRafraichissement, 'N');
            // arrêt du timer
            this.timerSubject.next();
            if (this.timerSubscription) {
                this.timerSubscription.unsubscribe();
            }
            resolve(true);
        });
    }
    /**
     * Permet de stopper le rafraichissement du jeton et de se deconnecter
     * Cette méthode contient les appels à
     *  RefreshService.stopperRafraichissement() et LoginService.deconnecter()
     * @returns Promise<any> renvoi resolve(true) lorsque les opérations sont terminées
     */
    stopperRafraichissementEtDeconnecter() {
        return new Promise((resolve, reject) => {
            this.stopperRafraichissement().then(() => {
                this.loginService.deconnecter().then(() => {
                    resolve(true);
                });
            });
        });
    }
}
RefreshService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: RefreshService, deps: [{ token: PrismeAngularConfiguration }, { token: i1.OauthCallbackService }, { token: i2.LoginService }, { token: i3.PrismeAngularInitConfig }], target: i0.ɵɵFactoryTarget.Injectable });
RefreshService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: RefreshService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: RefreshService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i4.PrismeAngularConfiguration, decorators: [{
                    type: Inject,
                    args: [PrismeAngularConfiguration]
                }] }, { type: i1.OauthCallbackService }, { type: i2.LoginService }, { type: i3.PrismeAngularInitConfig }]; } });
//# sourceMappingURL=data:application/json;base64,