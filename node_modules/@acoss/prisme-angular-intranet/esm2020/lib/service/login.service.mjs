import { Inject, Injectable } from '@angular/core';
import { PrismeAngularInitConfig } from '../prisme-angular-init.config';
import { InfosUtilisateur } from '../model/infos-utilisateur';
import * as i0 from "@angular/core";
import * as i1 from "./access-token.service";
import * as i2 from "../prisme-angular-init.config";
export class LoginService {
    constructor(config, accessTokenService) {
        this.config = config;
        this.accessTokenService = accessTokenService;
    }
    /**
     * Indique si l'utilisateur est connecté.
     */
    isConnecte() {
        const logInfo = this.getInfos();
        return logInfo !== null && logInfo.accessTokenBack !== null;
    }
    /**
     * Renvoie toutes les informations
     */
    getInfos() {
        const infos = this.getStorage().getItem(this.config.cleStockageInfosUtilisateur);
        if (infos === null) {
            return null;
        }
        return JSON.parse(infos);
    }
    /**
     * Renvoie les infos de l'utilisateur
     */
    getInfosUtilisateurBack() {
        const infos = this.getInfos();
        if (infos != null && infos.infosUtilisateurBack != null) {
            return new InfosUtilisateur(infos.infosUtilisateurBack);
        }
        return null;
    }
    getInfosUtilisateurFront() {
        const infos = this.getInfos();
        if (infos != null && infos.infosUtilisateurFront != null) {
            return new InfosUtilisateur(infos.infosUtilisateurFront);
        }
        return null;
    }
    /**
     * Renvoie le payload
     */
    getPayload() {
        const infos = this.getInfos();
        if (infos === null) {
            return null;
        }
        return infos.payload;
    }
    /**
     * Renvoie les droits de l'utilisateur pour le frontend
     */
    getDroitsUtilisateur() {
        const sessionUtilisateur = this.getInfos();
        if (sessionUtilisateur === null) {
            return null;
        }
        return this.accessTokenService.getDroitsUtilisateur(sessionUtilisateur.accessTokenFront);
    }
    /**
     * Renvoie les droits de l'utilisateur pour le backend
     */
    getDroitsUtilisateurBack() {
        const sessionUtilisateur = this.getInfos();
        if (sessionUtilisateur === null) {
            return null;
        }
        return this.accessTokenService.getDroitsUtilisateur(sessionUtilisateur.accessTokenBack);
    }
    getAccessTokenBack() {
        const infos = this.getInfos();
        if (infos === null) {
            return null;
        }
        return infos.accessTokenBack;
    }
    getAccessTokenFront() {
        const infos = this.getInfos();
        if (infos === null) {
            return null;
        }
        return infos.accessTokenFront;
    }
    getOceanToken() {
        const infos = this.getInfos();
        if (infos === null) {
            return null;
        }
        return infos.oceanToken;
    }
    getMode() {
        const infos = this.getInfos();
        if (infos === null) {
            return null;
        }
        return infos.mode;
    }
    /**
     * Enregistre les infos utilisateur
     * @param infos Jeton
     */
    storeInfos(infos) {
        // On récupère le payload existant
        let oldinfos;
        oldinfos = JSON.parse(this.getStorage().getItem(this.config.cleStockageInfosUtilisateur));
        if (oldinfos && infos) {
            infos.payload = infos.payload || oldinfos.payload;
        }
        this.getStorage().setItem(this.config.cleStockageInfosUtilisateur, JSON.stringify(infos));
    }
    /**
     * Pour le mode portail, permet de mettre à jour l'access token dans les infos utilisateur.
     * @param accessToken Jeton
     * @param expiration Date
     */
    updateAccessToken(accessToken, expiration) {
        const infos = this.getInfos();
        if (infos !== null) {
            infos.accessTokenBack = accessToken;
            infos.expiration = expiration;
        }
        this.storeInfos(infos);
    }
    /**
     * Permet de mettre à jour les infos utilisateur.
     * @param infosUtilisateur les infos utilisateur à mettre à jour
     */
    updateInfosUtilisateurBack(infosUtilisateur) {
        const infos = this.getInfos();
        if (infos !== null) {
            infos.infosUtilisateurBack = infosUtilisateur;
            this.storeInfos(infos);
        }
    }
    /**
     * Permet de mettre à jour les infos utilisateur.
     * @param infosUtilisateur les infos utilisateur à mettre à jour
     */
    updateInfosUtilisateurFront(infosUtilisateur) {
        const infos = this.getInfos();
        if (infos !== null) {
            infos.infosUtilisateurFront = infosUtilisateur;
            this.storeInfos(infos);
        }
    }
    getIdentifiantUtilisateur() {
        const sessionUtilisateur = this.getInfos();
        return this.accessTokenService.getIdentifiantUtilisateur(sessionUtilisateur.accessTokenFront);
    }
    /**
   * Permet de mettre à jour le payload
   * @param payload a mettre à jour
   */
    updatePayload(payload) {
        const infos = this.getInfos();
        if (infos !== null) {
            infos.payload = payload;
            this.storeInfos(infos);
        }
    }
    /**
     * Controle si les données utilisateur contiennent bien les droits demandés
     * @param droits Liste des droits
     */
    estAutorise(droits) {
        return this.checkAutorisation(droits, this.getDroitsUtilisateur());
    }
    /**
     * Controle si les données utilisateur contiennent bien les droits demandés pour le backend
     * @param droits Liste des droits
     */
    estAutoriseBack(droits) {
        return this.checkAutorisation(droits, this.getDroitsUtilisateurBack());
    }
    checkAutorisation(droits, droitsJeton) {
        if (!this.isConnecte()) {
            return false;
        }
        for (const droit of droits) {
            if (this.controleAutorisation(droit, droitsJeton)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Controle si les données utilisateur contiennent bien le droit spécifique demandé
     * On considère que les droits sont de la forme <perimetre>:<application>:<profil>
     * @param droit Droit
     * @param droitsJeton la liste des droits contenu dans le jeton
     */
    controleAutorisation(droit, droitsJeton) {
        if (!droitsJeton) {
            return false;
        }
        // Si la chaine <perimetre>:<application>:<profil> contient le droit, alors l'utilisateur est autorisé
        for (const droitJeton of droitsJeton) {
            const values = droitJeton.split(':');
            if (values && -1 !== values.indexOf(droit)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Déconnecter
     * @returns Promise<any> renvoi resolve(true) lorsque la déconnexion est terminée
     */
    deconnecter() {
        return new Promise((resolve, reject) => {
            this.getStorage().clear();
            localStorage.clear();
            resolve(true);
        });
    }
    getStorage() {
        if (this.config.utiliserLocalStorage) {
            return localStorage;
        }
        return sessionStorage;
    }
}
LoginService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: LoginService, deps: [{ token: PrismeAngularInitConfig }, { token: i1.AccessTokenService }], target: i0.ɵɵFactoryTarget.Injectable });
LoginService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: LoginService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: LoginService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i2.PrismeAngularInitConfig, decorators: [{
                    type: Inject,
                    args: [PrismeAngularInitConfig]
                }] }, { type: i1.AccessTokenService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Fjb3NzL3ByaXNtZS1hbmd1bGFyLWludHJhbmV0L3NyYy9saWIvc2VydmljZS9sb2dpbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQ3RFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDOzs7O0FBaUI1RCxNQUFNLE9BQU8sWUFBWTtJQUV2QixZQUFxRCxNQUErQixFQUFVLGtCQUFzQztRQUEvRSxXQUFNLEdBQU4sTUFBTSxDQUF5QjtRQUFVLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFDcEksQ0FBQztJQUVEOztPQUVHO0lBQ0gsVUFBVTtRQUNSLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQyxPQUFPLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxDQUFDLGVBQWUsS0FBSyxJQUFJLENBQUM7SUFDOUQsQ0FBQztJQUVEOztPQUVHO0lBQ0ssUUFBUTtRQUNkLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ2pGLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRDs7T0FFRztJQUNILHVCQUF1QjtRQUNyQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDOUIsSUFBSSxLQUFLLElBQUks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QU0sVUFBVSxJQUFJLFdBQVcsRUFBRTtZQUNwQyxNQUFNLE1BQU0sR0FBVSxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzVDLElBQUksTUFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzFDLE9BQU8sSUFBSSxDQUFDO2FBQ2I7U0FDRjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7T0FHRztJQUNILFdBQVc7UUFDVCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMxQixZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUdPLFVBQVU7UUFDaEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFO1lBQ3BDLE9BQU8sWUFBWSxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQzs7eUdBNVBVLFlBQVksa0JBRUgsdUJBQXVCOzZHQUZoQyxZQUFZLGNBRlgsTUFBTTsyRkFFUCxZQUFZO2tCQUh4QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBR2MsTUFBTTsyQkFBQyx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1ByaXNtZUFuZ3VsYXJJbml0Q29uZmlnfSBmcm9tICcuLi9wcmlzbWUtYW5ndWxhci1pbml0LmNvbmZpZyc7XG5pbXBvcnQge0luZm9zVXRpbGlzYXRldXJ9IGZyb20gJy4uL21vZGVsL2luZm9zLXV0aWxpc2F0ZXVyJztcbmltcG9ydCB7IEFjY2Vzc1Rva2VuU2VydmljZSB9IGZyb20gJy4vYWNjZXNzLXRva2VuLnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlc3Npb25VdGlsaXNhdGV1ciB7XG4gIGFjY2Vzc1Rva2VuQmFjazogc3RyaW5nO1xuICBhY2Nlc3NUb2tlbkZyb250OiBzdHJpbmc7XG4gIG9jZWFuVG9rZW46IHN0cmluZztcbiAgZXhwaXJhdGlvbjogRGF0ZTtcbiAgbW9kZTogc3RyaW5nO1xuICBpbmZvc1V0aWxpc2F0ZXVyQmFjazogYW55O1xuICBpbmZvc1V0aWxpc2F0ZXVyRnJvbnQ6IGFueTtcbiAgcGF5bG9hZDogYW55O1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMb2dpblNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoUHJpc21lQW5ndWxhckluaXRDb25maWcpIHByaXZhdGUgY29uZmlnOiBQcmlzbWVBbmd1bGFySW5pdENvbmZpZywgcHJpdmF0ZSBhY2Nlc3NUb2tlblNlcnZpY2U6IEFjY2Vzc1Rva2VuU2VydmljZSkge1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGlxdWUgc2kgbCd1dGlsaXNhdGV1ciBlc3QgY29ubmVjdMOpLlxuICAgKi9cbiAgaXNDb25uZWN0ZSgpOiBib29sZWFuIHtcbiAgICBjb25zdCBsb2dJbmZvID0gdGhpcy5nZXRJbmZvcygpO1xuICAgIHJldHVybiBsb2dJbmZvICE9PSBudWxsICYmIGxvZ0luZm8uYWNjZXNzVG9rZW5CYWNrICE9PSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbnZvaWUgdG91dGVzIGxlcyBpbmZvcm1hdGlvbnNcbiAgICovXG4gIHByaXZhdGUgZ2V0SW5mb3MoKTogU2Vzc2lvblV0aWxpc2F0ZXVyIHtcbiAgICBjb25zdCBpbmZvcyA9IHRoaXMuZ2V0U3RvcmFnZSgpLmdldEl0ZW0odGhpcy5jb25maWcuY2xlU3RvY2thZ2VJbmZvc1V0aWxpc2F0ZXVyKTtcbiAgICBpZiAoaW5mb3MgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBKU09OLnBhcnNlKGluZm9zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW52b2llIGxlcyBpbmZvcyBkZSBsJ3V0aWxpc2F0ZXVyXG4gICAqL1xuICBnZXRJbmZvc1V0aWxpc2F0ZXVyQmFjaygpOiBJbmZvc1V0aWxpc2F0ZXVyIHtcbiAgICBjb25zdCBpbmZvcyA9IHRoaXMuZ2V0SW5mb3MoKTtcbiAgICBpZiAoaW5mb3MgIT0gbnVsbCAmJiBpbmZvcy5pbmZvc1V0aWxpc2F0ZXVyQmFjayAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEluZm9zVXRpbGlzYXRldXIoaW5mb3MuaW5mb3NVdGlsaXNhdGV1ckJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0SW5mb3NVdGlsaXNhdGV1ckZyb250KCk6IEluZm9zVXRpbGlzYXRldXIge1xuICAgIGNvbnN0IGluZm9zID0gdGhpcy5nZXRJbmZvcygpO1xuICAgIGlmIChpbmZvcyAhPSBudWxsICYmIGluZm9zLmluZm9zVXRpbGlzYXRldXJGcm9udCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEluZm9zVXRpbGlzYXRldXIoaW5mb3MuaW5mb3NVdGlsaXNhdGV1ckZyb250KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW52b2llIGxlIHBheWxvYWRcbiAgICovXG4gIGdldFBheWxvYWQoKTogYW55IHtcbiAgICBjb25zdCBpbmZvcyA9IHRoaXMuZ2V0SW5mb3MoKTtcbiAgICBpZiAoaW5mb3MgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBpbmZvcy5wYXlsb2FkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbnZvaWUgbGVzIGRyb2l0cyBkZSBsJ3V0aWxpc2F0ZXVyIHBvdXIgbGUgZnJvbnRlbmRcbiAgICovXG4gIGdldERyb2l0c1V0aWxpc2F0ZXVyKCk6IGFueSB7XG4gICAgY29uc3Qgc2Vzc2lvblV0aWxpc2F0ZXVyID0gdGhpcy5nZXRJbmZvcygpO1xuICAgIGlmIChzZXNzaW9uVXRpbGlzYXRldXIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hY2Nlc3NUb2tlblNlcnZpY2UuZ2V0RHJvaXRzVXRpbGlzYXRldXIoc2Vzc2lvblV0aWxpc2F0ZXVyLmFjY2Vzc1Rva2VuRnJvbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbnZvaWUgbGVzIGRyb2l0cyBkZSBsJ3V0aWxpc2F0ZXVyIHBvdXIgbGUgYmFja2VuZFxuICAgKi9cbiAgZ2V0RHJvaXRzVXRpbGlzYXRldXJCYWNrKCk6IGFueSB7XG4gICAgY29uc3Qgc2Vzc2lvblV0aWxpc2F0ZXVyID0gdGhpcy5nZXRJbmZvcygpO1xuICAgIGlmIChzZXNzaW9uVXRpbGlzYXRldXIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hY2Nlc3NUb2tlblNlcnZpY2UuZ2V0RHJvaXRzVXRpbGlzYXRldXIoc2Vzc2lvblV0aWxpc2F0ZXVyLmFjY2Vzc1Rva2VuQmFjayk7XG4gIH1cblxuICBnZXRBY2Nlc3NUb2tlbkJhY2soKTogc3RyaW5nIHtcbiAgICBjb25zdCBpbmZvcyA9IHRoaXMuZ2V0SW5mb3MoKTtcbiAgICBpZiAoaW5mb3MgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBpbmZvcy5hY2Nlc3NUb2tlbkJhY2s7XG4gIH1cblxuICBnZXRBY2Nlc3NUb2tlbkZyb250KCk6IHN0cmluZyB7XG4gICAgY29uc3QgaW5mb3MgPSB0aGlzLmdldEluZm9zKCk7XG4gICAgaWYgKGluZm9zID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5mb3MuYWNjZXNzVG9rZW5Gcm9udDtcbiAgfVxuXG4gIGdldE9jZWFuVG9rZW4oKTogc3RyaW5nIHtcbiAgICBjb25zdCBpbmZvcyA9IHRoaXMuZ2V0SW5mb3MoKTtcbiAgICBpZiAoaW5mb3MgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBpbmZvcy5vY2VhblRva2VuO1xuICB9XG5cbiAgZ2V0TW9kZSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGluZm9zID0gdGhpcy5nZXRJbmZvcygpO1xuICAgIGlmIChpbmZvcyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZm9zLm1vZGUgO1xuICB9XG5cbiAgLyoqXG4gICAqIEVucmVnaXN0cmUgbGVzIGluZm9zIHV0aWxpc2F0ZXVyXG4gICAqIEBwYXJhbSBpbmZvcyBKZXRvblxuICAgKi9cbiAgc3RvcmVJbmZvcyhpbmZvczogU2Vzc2lvblV0aWxpc2F0ZXVyKTogdm9pZCB7XG4gICAgLy8gT24gcsOpY3Vww6hyZSBsZSBwYXlsb2FkIGV4aXN0YW50XG4gICAgbGV0IG9sZGluZm9zOiBTZXNzaW9uVXRpbGlzYXRldXI7XG4gICAgICBvbGRpbmZvcyA9IEpTT04ucGFyc2UodGhpcy5nZXRTdG9yYWdlKCkuZ2V0SXRlbSh0aGlzLmNvbmZpZy5jbGVTdG9ja2FnZUluZm9zVXRpbGlzYXRldXIpKTtcbiAgICAgIGlmIChvbGRpbmZvcyAmJiBpbmZvcykge1xuICAgICAgICBpbmZvcy5wYXlsb2FkID0gaW5mb3MucGF5bG9hZCB8fCBvbGRpbmZvcy5wYXlsb2FkO1xuICAgICAgfVxuICAgIHRoaXMuZ2V0U3RvcmFnZSgpLnNldEl0ZW0odGhpcy5jb25maWcuY2xlU3RvY2thZ2VJbmZvc1V0aWxpc2F0ZXVyLCBKU09OLnN0cmluZ2lmeShpbmZvcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvdXIgbGUgbW9kZSBwb3J0YWlsLCBwZXJtZXQgZGUgbWV0dHJlIMOgIGpvdXIgbCdhY2Nlc3MgdG9rZW4gZGFucyBsZXMgaW5mb3MgdXRpbGlzYXRldXIuXG4gICAqIEBwYXJhbSBhY2Nlc3NUb2tlbiBKZXRvblxuICAgKiBAcGFyYW0gZXhwaXJhdGlvbiBEYXRlXG4gICAqL1xuICB1cGRhdGVBY2Nlc3NUb2tlbihhY2Nlc3NUb2tlbjogc3RyaW5nLCBleHBpcmF0aW9uOiBEYXRlKTogdm9pZCB7XG4gICAgY29uc3QgaW5mb3MgPSB0aGlzLmdldEluZm9zKCk7XG4gICAgaWYgKGluZm9zICE9PSBudWxsKSB7XG4gICAgICBpbmZvcy5hY2Nlc3NUb2tlbkJhY2sgPSBhY2Nlc3NUb2tlbjtcbiAgICAgIGluZm9zLmV4cGlyYXRpb24gPSBleHBpcmF0aW9uO1xuICAgIH1cblxuICAgIHRoaXMuc3RvcmVJbmZvcyhpbmZvcyk7XG4gIH1cblxuICAvKipcbiAgICogUGVybWV0IGRlIG1ldHRyZSDDoCBqb3VyIGxlcyBpbmZvcyB1dGlsaXNhdGV1ci5cbiAgICogQHBhcmFtIGluZm9zVXRpbGlzYXRldXIgbGVzIGluZm9zIHV0aWxpc2F0ZXVyIMOgIG1ldHRyZSDDoCBqb3VyXG4gICAqL1xuICB1cGRhdGVJbmZvc1V0aWxpc2F0ZXVyQmFjayhpbmZvc1V0aWxpc2F0ZXVyKSB7XG4gICAgY29uc3QgaW5mb3MgPSB0aGlzLmdldEluZm9zKCk7XG4gICAgaWYgKGluZm9zICE9PSBudWxsKSB7XG4gICAgICBpbmZvcy5pbmZvc1V0aWxpc2F0ZXVyQmFjayA9IGluZm9zVXRpbGlzYXRldXI7XG4gICAgICB0aGlzLnN0b3JlSW5mb3MoaW5mb3MpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJtZXQgZGUgbWV0dHJlIMOgIGpvdXIgbGVzIGluZm9zIHV0aWxpc2F0ZXVyLlxuICAgKiBAcGFyYW0gaW5mb3NVdGlsaXNhdGV1ciBsZXMgaW5mb3MgdXRpbGlzYXRldXIgw6AgbWV0dHJlIMOgIGpvdXJcbiAgICovXG4gIHVwZGF0ZUluZm9zVXRpbGlzYXRldXJGcm9udChpbmZvc1V0aWxpc2F0ZXVyKSB7XG4gICAgY29uc3QgaW5mb3MgPSB0aGlzLmdldEluZm9zKCk7XG4gICAgaWYgKGluZm9zICE9PSBudWxsKSB7XG4gICAgICBpbmZvcy5pbmZvc1V0aWxpc2F0ZXVyRnJvbnQgPSBpbmZvc1V0aWxpc2F0ZXVyO1xuICAgICAgdGhpcy5zdG9yZUluZm9zKGluZm9zKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0SWRlbnRpZmlhbnRVdGlsaXNhdGV1cigpOiBzdHJpbmcge1xuICAgIGNvbnN0IHNlc3Npb25VdGlsaXNhdGV1ciA9IHRoaXMuZ2V0SW5mb3MoKTtcbiAgICByZXR1cm4gdGhpcy5hY2Nlc3NUb2tlblNlcnZpY2UuZ2V0SWRlbnRpZmlhbnRVdGlsaXNhdGV1cihzZXNzaW9uVXRpbGlzYXRldXIuYWNjZXNzVG9rZW5Gcm9udCk7XG4gIH1cblxuICAgIC8qKlxuICAgKiBQZXJtZXQgZGUgbWV0dHJlIMOgIGpvdXIgbGUgcGF5bG9hZFxuICAgKiBAcGFyYW0gcGF5bG9hZCBhIG1ldHRyZSDDoCBqb3VyXG4gICAqL1xuICB1cGRhdGVQYXlsb2FkKHBheWxvYWQpIHtcbiAgICBjb25zdCBpbmZvcyA9IHRoaXMuZ2V0SW5mb3MoKTtcbiAgICBpZiAoaW5mb3MgIT09IG51bGwpIHtcbiAgICAgIGluZm9zLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgICAgdGhpcy5zdG9yZUluZm9zKGluZm9zKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENvbnRyb2xlIHNpIGxlcyBkb25uw6llcyB1dGlsaXNhdGV1ciBjb250aWVubmVudCBiaWVuIGxlcyBkcm9pdHMgZGVtYW5kw6lzXG4gICAqIEBwYXJhbSBkcm9pdHMgTGlzdGUgZGVzIGRyb2l0c1xuICAgKi9cbiAgZXN0QXV0b3Jpc2UoZHJvaXRzOiBzdHJpbmdbXSkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrQXV0b3Jpc2F0aW9uKGRyb2l0cywgdGhpcy5nZXREcm9pdHNVdGlsaXNhdGV1cigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb250cm9sZSBzaSBsZXMgZG9ubsOpZXMgdXRpbGlzYXRldXIgY29udGllbm5lbnQgYmllbiBsZXMgZHJvaXRzIGRlbWFuZMOpcyBwb3VyIGxlIGJhY2tlbmRcbiAgICogQHBhcmFtIGRyb2l0cyBMaXN0ZSBkZXMgZHJvaXRzXG4gICAqL1xuICBlc3RBdXRvcmlzZUJhY2soZHJvaXRzOiBzdHJpbmdbXSkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrQXV0b3Jpc2F0aW9uKGRyb2l0cywgdGhpcy5nZXREcm9pdHNVdGlsaXNhdGV1ckJhY2soKSk7XG4gIH1cblxuICBwcml2YXRlIGNoZWNrQXV0b3Jpc2F0aW9uKGRyb2l0czogc3RyaW5nW10sIGRyb2l0c0pldG9uOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZHJvaXQgb2YgZHJvaXRzKSB7XG4gICAgICBpZiAodGhpcy5jb250cm9sZUF1dG9yaXNhdGlvbihkcm9pdCwgZHJvaXRzSmV0b24pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ29udHJvbGUgc2kgbGVzIGRvbm7DqWVzIHV0aWxpc2F0ZXVyIGNvbnRpZW5uZW50IGJpZW4gbGUgZHJvaXQgc3DDqWNpZmlxdWUgZGVtYW5kw6lcbiAgICogT24gY29uc2lkw6hyZSBxdWUgbGVzIGRyb2l0cyBzb250IGRlIGxhIGZvcm1lIDxwZXJpbWV0cmU+OjxhcHBsaWNhdGlvbj46PHByb2ZpbD5cbiAgICogQHBhcmFtIGRyb2l0IERyb2l0XG4gICAqIEBwYXJhbSBkcm9pdHNKZXRvbiBsYSBsaXN0ZSBkZXMgZHJvaXRzIGNvbnRlbnUgZGFucyBsZSBqZXRvblxuICAgKi9cbiAgcHJpdmF0ZSBjb250cm9sZUF1dG9yaXNhdGlvbihkcm9pdDogc3RyaW5nLCBkcm9pdHNKZXRvbjogYW55KSB7XG4gICAgaWYgKCFkcm9pdHNKZXRvbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFNpIGxhIGNoYWluZSA8cGVyaW1ldHJlPjo8YXBwbGljYXRpb24+Ojxwcm9maWw+IGNvbnRpZW50IGxlIGRyb2l0LCBhbG9ycyBsJ3V0aWxpc2F0ZXVyIGVzdCBhdXRvcmlzw6lcbiAgICBmb3IgKGNvbnN0IGRyb2l0SmV0b24gb2YgZHJvaXRzSmV0b24pIHtcbiAgICAgIGNvbnN0IHZhbHVlczogYW55W10gPSBkcm9pdEpldG9uLnNwbGl0KCc6Jyk7XG4gICAgICBpZiAodmFsdWVzICYmIC0xICE9PSB2YWx1ZXMuaW5kZXhPZihkcm9pdCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEw6ljb25uZWN0ZXJcbiAgICogQHJldHVybnMgUHJvbWlzZTxhbnk+IHJlbnZvaSByZXNvbHZlKHRydWUpIGxvcnNxdWUgbGEgZMOpY29ubmV4aW9uIGVzdCB0ZXJtaW7DqWVcbiAgICovXG4gIGRlY29ubmVjdGVyKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuZ2V0U3RvcmFnZSgpLmNsZWFyKCk7XG4gICAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcbiAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgfSk7XG4gIH1cblxuXG4gIHByaXZhdGUgZ2V0U3RvcmFnZSgpIHtcbiAgICBpZiAodGhpcy5jb25maWcudXRpbGlzZXJMb2NhbFN0b3JhZ2UpIHtcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2U7XG4gICAgfVxuICAgIHJldHVybiBzZXNzaW9uU3RvcmFnZTtcbiAgfVxufVxuIl19