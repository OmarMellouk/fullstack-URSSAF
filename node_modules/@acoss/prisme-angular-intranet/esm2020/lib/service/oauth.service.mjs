import { Inject, Injectable } from '@angular/core';
import * as pako from 'pako';
import { PrismeAngularConfiguration } from '../prisme-angular.config';
import * as i0 from "@angular/core";
import * as i1 from "../prisme-angular-init.config";
import * as i2 from "@angular/router";
import * as i3 from "../prisme-angular.config";
export class OauthService {
    constructor(environment, prismeAngularInitConfig, router) {
        this.environment = environment;
        this.prismeAngularInitConfig = prismeAngularInitConfig;
        this.router = router;
        /** Chaines spécifiques à OIDC */
        this.response_type = 'token id_token';
        this.grant_type_jwt = 'urn:ietf:params:oauth:grant-type:jwt-bearer';
        this.assertion_type_jwt = 'jwt_token';
        this.grant_type_ocean = 'ocean_bearer';
        this.assertion_type_ocean = 'ocean_token';
    }
    savePageFrom(url) {
        sessionStorage.setItem(this.prismeAngularInitConfig.cleStockagePageFrom, url);
    }
    /**
     * Renvoie l'URL vers la mire de login pour authentification
     */
    authentificationFrontUrl(url) {
        this.savePageFrom(url);
        const response_type = encodeURIComponent(this.response_type);
        const redirect_uri = encodeURIComponent(this.environment.applicationUri + '/retour_pss');
        const scope = encodeURIComponent(this.environment.prismeScopeFront);
        const client_id = this.environment.prismeCodeApp;
        const nonce = encodeURIComponent(this.randomString(OauthService.NONCE_LENGTH));
        const state = encodeURIComponent(this.randomString(OauthService.STATE_LENGTH));
        sessionStorage.setItem(this.prismeAngularInitConfig.cleStockageDernierNonce, nonce);
        sessionStorage.setItem(this.prismeAngularInitConfig.cleStockageDernierState, state);
        // Construction de l'URL vers la mire de login
        const url_endpointLogin = this.environment.prismeAuthzEndpoint;
        return url_endpointLogin + '?response_type=' + response_type
            + '&client_id=' + client_id
            + '&redirect_uri=' + redirect_uri
            + '&scope=' + scope
            + '&nonce=' + nonce
            + '&state=' + state;
    }
    /**
     * Renvoie un body de requête en mode assertion JWT
     * @param assertion Jeton
     */
    authentificationBackAssertionJwt(assertion) {
        const jwtRequestBody = {};
        jwtRequestBody.grant_type = this.grant_type_jwt;
        jwtRequestBody.client_id = this.environment.prismeClientId;
        jwtRequestBody.client_secret = this.environment.prismeClientSecret;
        jwtRequestBody.assertion_type = this.assertion_type_jwt;
        jwtRequestBody.assertion = assertion;
        // Le scope doit etre compressé puis encodé en base 64
        const compressed_scope = pako.gzip(this.environment.prismeScopeBack, { to: 'string' });
        jwtRequestBody.scope = btoa(compressed_scope);
        return jwtRequestBody;
    }
    /**
   * Renvoie un body de requête en mode assertion JWT
   * @param assertion Jeton
   */
    authentificationFrontAssertionOcean(assertion) {
        const jwtRequestBody = {};
        jwtRequestBody.grant_type = this.grant_type_ocean;
        jwtRequestBody.client_id = this.environment.prismeClientId;
        jwtRequestBody.client_secret = this.environment.prismeClientSecret;
        jwtRequestBody.assertion_type = this.assertion_type_ocean;
        jwtRequestBody.assertion = assertion;
        // Le scope doit etre compressé puis encodé en base 64
        const compressed_scope = pako.gzip(this.environment.prismeScopeFront, { to: 'string' });
        jwtRequestBody.scope = btoa(compressed_scope);
        return jwtRequestBody;
    }
    /**
     * Récupère la dernière valeur du Nonce.
     */
    getLastNonce() {
        return sessionStorage.getItem(this.prismeAngularInitConfig.cleStockageDernierNonce);
    }
    /**
     * Récupère la dernière valeur du state.
     */
    getLastState() {
        return sessionStorage.getItem(this.prismeAngularInitConfig.cleStockageDernierState);
    }
    /**
     * Génère une chaine aléatoire pour le nonce/state
     * @param length Longueur
     */
    randomString(length) {
        let text = '';
        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';
        for (let i = 0; i < length; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    }
    /**
     * Vérifie s'il s'agit d'une ouverture en mode connexion WebMessaging
     * @param fragmentValue Valeur d'URL Fragment
     */
    isDelegatedOpeningWithWebMessage(fragmentValue) {
        return this.environment.waitWebMessageURLFragment === fragmentValue;
    }
}
OauthService.NONCE_LENGTH = 50;
OauthService.STATE_LENGTH = 50;
OauthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: OauthService, deps: [{ token: PrismeAngularConfiguration }, { token: i1.PrismeAngularInitConfig }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Injectable });
OauthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: OauthService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: OauthService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i3.PrismeAngularConfiguration, decorators: [{
                    type: Inject,
                    args: [PrismeAngularConfiguration]
                }] }, { type: i1.PrismeAngularInitConfig }, { type: i2.Router }]; } });
//# sourceMappingURL=data:application/json;base64,