import { Injectable, Inject } from '@angular/core';
import * as jsrsasign from 'jsrsasign';
import { PrismeAngularConfiguration } from '../prisme-angular.config';
import * as i0 from "@angular/core";
import * as i1 from "../prisme-angular.config";
export class OauthValidationService {
    constructor(environment) {
        this.environment = environment;
    }
    /**
     * Valider que le champ "iss" du token correspond bien au provider
     * "Malicious compliance" vis à vis du guide développeur
     * @param token Jeton
     */
    validerIss(token) {
        return token.iss === this.environment.prismeIss;
    }
    /**
     * Valider que le champ "exp" du token ne correspond pas à une date passée
     * @param token Jeton
     */
    validerExp(token) {
        // Construire un objet Date qui contient la date d'expiration du jeton
        const dateExp = new Date(0);
        dateExp.setUTCSeconds(token.exp);
        if (!dateExp) {
            return false;
        }
        // Comparer la date d'expiration à la date courante
        return dateExp.valueOf() > new Date().valueOf();
    }
    /**
     * Valider que le token est correctement signé
     * @param token Jeton
     * @param keys Cles
     * @param alg Algorithme
     */
    validerSignature(token, keys, alg) {
        // Récupérer le header du jeton
        const header_jeton_encode = token.split('.')[0];
        const header_decode = JSON.parse(atob(header_jeton_encode));
        // L'algorithme doit etre R256
        if (header_decode.alg !== alg) {
            return false;
        }
        let resultat = false;
        // Si une seule clé présente, pas de controle du kid
        if (keys.length === 1) {
            const key = keys[0];
            const clePublique = jsrsasign.KEYUTIL.getKey(key);
            resultat = jsrsasign.KJUR.jws.JWS.verify(token, clePublique, [alg]);
            return resultat;
        }
        // Comparaison de chaque clé à la clé fournie dans le jeton
        for (const key of keys) {
            if (key.kid === header_decode.kid) {
                const clePublique = jsrsasign.KEYUTIL.getKey(key);
                resultat = jsrsasign.KJUR.jws.JWS.verify(token, clePublique, [alg]);
                return resultat;
            }
        }
        return resultat;
    }
    /**
     * Valider que le champ "aud" du token n'est pas vide
     * @param token Jeton
     */
    validerAudNonVide(token) {
        return token.aud && token.aud.length > 0;
    }
    /**
   * Valider que le champ "sub" du token est égal au sujet + '@' + le client ID requis
   * @param token Jeton
   * @param sujet Sujet
   * @param client_id Identifiant
   */
    validerSubOcean(token, client_id) {
        const sub = token.sub.split('@');
        return sub.length === 2 && sub[1] === client_id;
    }
}
OauthValidationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: OauthValidationService, deps: [{ token: PrismeAngularConfiguration }], target: i0.ɵɵFactoryTarget.Injectable });
OauthValidationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: OauthValidationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: OauthValidationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.PrismeAngularConfiguration, decorators: [{
                    type: Inject,
                    args: [PrismeAngularConfiguration]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2F1dGgtdmFsaWRhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWNvc3MvcHJpc21lLWFuZ3VsYXItaW50cmFuZXQvc3JjL2xpYi9zZXJ2aWNlL29hdXRoLXZhbGlkYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEtBQUssU0FBUyxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7O0FBS3RFLE1BQU0sT0FBTyxzQkFBc0I7SUFFakMsWUFBd0QsV0FBdUM7UUFBdkMsZ0JBQVcsR0FBWCxXQUFXLENBQTRCO0lBQUksQ0FBQztJQUVwRzs7OztPQUlHO0lBQ0gsVUFBVSxDQUFDLEtBQVU7UUFDbkIsT0FBTyxLQUFLLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQ2xELENBQUM7SUFHRDs7O09BR0c7SUFDSCxVQUFVLENBQUMsS0FBVTtRQUNuQixzRUFBc0U7UUFDdEUsTUFBTSxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxtREFBbUQ7UUFDbkQsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxnQkFBZ0IsQ0FBQyxLQUFVLEVBQUUsSUFBUyxFQUFFLEdBQVc7UUFDakQsK0JBQStCO1FBQy9CLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7UUFFNUQsOEJBQThCO1FBQzlCLElBQUksYUFBYSxDQUFDLEdBQUcsS0FBSyxHQUFHLEVBQUU7WUFDN0IsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQztRQUVyQixvREFBb0Q7UUFDcEQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNyQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFcEIsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbEQsUUFBUSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDcEUsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFFRCwyREFBMkQ7UUFDM0QsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDdEIsSUFBSSxHQUFHLENBQUMsR0FBRyxLQUFLLGFBQWEsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2pDLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNsRCxRQUFRLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDcEUsT0FBTyxRQUFRLENBQUM7YUFDakI7U0FDRjtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxpQkFBaUIsQ0FBQyxLQUFVO1FBQzFCLE9BQU8sS0FBSyxDQUFDLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVDOzs7OztLQUtDO0lBQ0gsZUFBZSxDQUFDLEtBQVUsRUFBRSxTQUFpQjtRQUMzQyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUM7SUFDbEQsQ0FBQzs7bUhBdkZVLHNCQUFzQixrQkFFYiwwQkFBMEI7dUhBRm5DLHNCQUFzQixjQUZyQixNQUFNOzJGQUVQLHNCQUFzQjtrQkFIbEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQUdjLE1BQU07MkJBQUMsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgKiBhcyBqc3JzYXNpZ24gZnJvbSAnanNyc2FzaWduJztcbmltcG9ydCB7IFByaXNtZUFuZ3VsYXJDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vcHJpc21lLWFuZ3VsYXIuY29uZmlnJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgT2F1dGhWYWxpZGF0aW9uU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChQcmlzbWVBbmd1bGFyQ29uZmlndXJhdGlvbikgcHJpdmF0ZSBlbnZpcm9ubWVudDogUHJpc21lQW5ndWxhckNvbmZpZ3VyYXRpb24pIHsgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGVyIHF1ZSBsZSBjaGFtcCBcImlzc1wiIGR1IHRva2VuIGNvcnJlc3BvbmQgYmllbiBhdSBwcm92aWRlclxuICAgKiBcIk1hbGljaW91cyBjb21wbGlhbmNlXCIgdmlzIMOgIHZpcyBkdSBndWlkZSBkw6l2ZWxvcHBldXJcbiAgICogQHBhcmFtIHRva2VuIEpldG9uXG4gICAqL1xuICB2YWxpZGVySXNzKHRva2VuOiBhbnkpIHtcbiAgICByZXR1cm4gdG9rZW4uaXNzID09PSB0aGlzLmVudmlyb25tZW50LnByaXNtZUlzcztcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFZhbGlkZXIgcXVlIGxlIGNoYW1wIFwiZXhwXCIgZHUgdG9rZW4gbmUgY29ycmVzcG9uZCBwYXMgw6AgdW5lIGRhdGUgcGFzc8OpZVxuICAgKiBAcGFyYW0gdG9rZW4gSmV0b25cbiAgICovXG4gIHZhbGlkZXJFeHAodG9rZW46IGFueSkge1xuICAgIC8vIENvbnN0cnVpcmUgdW4gb2JqZXQgRGF0ZSBxdWkgY29udGllbnQgbGEgZGF0ZSBkJ2V4cGlyYXRpb24gZHUgamV0b25cbiAgICBjb25zdCBkYXRlRXhwID0gbmV3IERhdGUoMCk7XG4gICAgZGF0ZUV4cC5zZXRVVENTZWNvbmRzKHRva2VuLmV4cCk7XG5cbiAgICBpZiAoIWRhdGVFeHApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDb21wYXJlciBsYSBkYXRlIGQnZXhwaXJhdGlvbiDDoCBsYSBkYXRlIGNvdXJhbnRlXG4gICAgcmV0dXJuIGRhdGVFeHAudmFsdWVPZigpID4gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRlciBxdWUgbGUgdG9rZW4gZXN0IGNvcnJlY3RlbWVudCBzaWduw6lcbiAgICogQHBhcmFtIHRva2VuIEpldG9uXG4gICAqIEBwYXJhbSBrZXlzIENsZXNcbiAgICogQHBhcmFtIGFsZyBBbGdvcml0aG1lXG4gICAqL1xuICB2YWxpZGVyU2lnbmF0dXJlKHRva2VuOiBhbnksIGtleXM6IGFueSwgYWxnOiBzdHJpbmcpIHtcbiAgICAvLyBSw6ljdXDDqXJlciBsZSBoZWFkZXIgZHUgamV0b25cbiAgICBjb25zdCBoZWFkZXJfamV0b25fZW5jb2RlID0gdG9rZW4uc3BsaXQoJy4nKVswXTtcbiAgICBjb25zdCBoZWFkZXJfZGVjb2RlID0gSlNPTi5wYXJzZShhdG9iKGhlYWRlcl9qZXRvbl9lbmNvZGUpKTtcblxuICAgIC8vIEwnYWxnb3JpdGhtZSBkb2l0IGV0cmUgUjI1NlxuICAgIGlmIChoZWFkZXJfZGVjb2RlLmFsZyAhPT0gYWxnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdGF0ID0gZmFsc2U7XG5cbiAgICAvLyBTaSB1bmUgc2V1bGUgY2zDqSBwcsOpc2VudGUsIHBhcyBkZSBjb250cm9sZSBkdSBraWRcbiAgICBpZiAoa2V5cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbMF07XG5cbiAgICAgIGNvbnN0IGNsZVB1YmxpcXVlID0ganNyc2FzaWduLktFWVVUSUwuZ2V0S2V5KGtleSk7XG4gICAgICByZXN1bHRhdCA9IGpzcnNhc2lnbi5LSlVSLmp3cy5KV1MudmVyaWZ5KHRva2VuLCBjbGVQdWJsaXF1ZSwgW2FsZ10pO1xuICAgICAgcmV0dXJuIHJlc3VsdGF0O1xuICAgIH1cblxuICAgIC8vIENvbXBhcmFpc29uIGRlIGNoYXF1ZSBjbMOpIMOgIGxhIGNsw6kgZm91cm5pZSBkYW5zIGxlIGpldG9uXG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgaWYgKGtleS5raWQgPT09IGhlYWRlcl9kZWNvZGUua2lkKSB7XG4gICAgICAgIGNvbnN0IGNsZVB1YmxpcXVlID0ganNyc2FzaWduLktFWVVUSUwuZ2V0S2V5KGtleSk7XG4gICAgICAgIHJlc3VsdGF0ID0ganNyc2FzaWduLktKVVIuandzLkpXUy52ZXJpZnkodG9rZW4sIGNsZVB1YmxpcXVlLCBbYWxnXSk7XG4gICAgICAgIHJldHVybiByZXN1bHRhdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0YXQ7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRlciBxdWUgbGUgY2hhbXAgXCJhdWRcIiBkdSB0b2tlbiBuJ2VzdCBwYXMgdmlkZVxuICAgKiBAcGFyYW0gdG9rZW4gSmV0b25cbiAgICovXG4gIHZhbGlkZXJBdWROb25WaWRlKHRva2VuOiBhbnkpIHtcbiAgICByZXR1cm4gdG9rZW4uYXVkICYmIHRva2VuLmF1ZC5sZW5ndGggPiAwO1xuICB9XG5cbiAgICAvKipcbiAgICogVmFsaWRlciBxdWUgbGUgY2hhbXAgXCJzdWJcIiBkdSB0b2tlbiBlc3Qgw6lnYWwgYXUgc3VqZXQgKyAnQCcgKyBsZSBjbGllbnQgSUQgcmVxdWlzXG4gICAqIEBwYXJhbSB0b2tlbiBKZXRvblxuICAgKiBAcGFyYW0gc3VqZXQgU3VqZXRcbiAgICogQHBhcmFtIGNsaWVudF9pZCBJZGVudGlmaWFudFxuICAgKi9cbiAgdmFsaWRlclN1Yk9jZWFuKHRva2VuOiBhbnksIGNsaWVudF9pZDogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3ViID0gdG9rZW4uc3ViLnNwbGl0KCdAJyk7XG4gICAgcmV0dXJuIHN1Yi5sZW5ndGggPT09IDIgJiYgc3ViWzFdID09PSBjbGllbnRfaWQ7XG4gIH1cbn1cbiJdfQ==