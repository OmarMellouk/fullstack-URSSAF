import { Inject, Injectable } from '@angular/core';
import { PrismeAngularConfiguration, PRISME_FAILURE_LOGIN_HANDLER, PRISME_SUCCESS_LOGIN_HANDLER } from './prisme-angular.config';
import * as i0 from "@angular/core";
import * as i1 from "./service/oauth.service";
import * as i2 from "./service/login.service";
import * as i3 from "./service/oauth-callback.service";
import * as i4 from "./service/refresh.service";
import * as i5 from "./prisme-angular.config";
export class AuthImplicitGuard {
    constructor(successLH, failureLH, environment, oauthService, loginService, oauthCallBackService, refreshService, _ngZone) {
        this.environment = environment;
        this.oauthService = oauthService;
        this.loginService = loginService;
        this.oauthCallBackService = oauthCallBackService;
        this.refreshService = refreshService;
        this._ngZone = _ngZone;
        this.successLH = successLH;
        this.failureLH = failureLH;
    }
    // Methode "GUARD" devant être résolue pour avant l'accès à une page protégée
    canActivate(route, state) {
        // En cas d'erreur, il y a des queryParams (notamment "?error=...")
        if (route.queryParams && route.queryParams['error']) {
            const error = route.queryParams['error'];
            switch (error) {
                case 'reset_password_required': {
                    // Cela signifie que l'utilisateur a cliqué sur le lien "mot de passe oublié"
                    alert('Le mot de passe de cette application est votre mot de passe Anais');
                    break;
                }
                default: {
                    // Cela signifie qu'il y a eu une erreur
                    this.failureLH.failureLogin(this.loginService);
                    return false;
                }
            }
        }
        if (this.loginService.isConnecte()) {
            this.refreshService.relancerRafraichissement();
            return true;
        }
        // Authentification directe via WebMessage
        // (un fragment spécifique présent dans l'url permet d'activer ce mode d'ouverture)
        if (this.oauthService.isDelegatedOpeningWithWebMessage(route.fragment)) {
            const result = this.connexionViaWebMessageHTML5();
            this.sendReadyWebMessageHTML5();
            return result;
        }
        // Authentification avec un fragment présent dans l'url
        if (route.fragment) {
            return this.connexionViaURLFragment(route.fragment);
        }
        // Redirection vers la mire d'authentification
        window.location.href = this.oauthService.authentificationFrontUrl(state.url);
        return false;
    }
    // Mode de connexion Cross-Domain via passage de Jeton avec usage du WebMessaging HTML5
    connexionViaWebMessageHTML5() {
        const myOauthCallBackService = this.oauthCallBackService;
        const mySuccessLH = this.successLH;
        const myFailureLH = this.failureLH;
        const myRefreshService = this.refreshService;
        const myLoginService = this.loginService;
        const myEnvironment = this.environment;
        return new Promise(function (resolve, reject) {
            // Ajout d'un listener en attente des evenements de type 'message'
            window.addEventListener('message', (e) => {
                if (e.data.topic === myEnvironment.jetonMessageTopic) {
                    const tokenValue = e.data.token_value;
                    // A la reception d'un message de type token, lancement des traitements de login
                    if (e.data.token_type === 'jwt') {
                        myOauthCallBackService.handleAccessToken(tokenValue, 'portail', () => mySuccessLH.successLogin(myRefreshService), () => myFailureLH.failureLogin(myLoginService))
                            .then(() => {
                            myRefreshService.initierRafraichissement();
                            resolve(true);
                        });
                    }
                    else if (e.data.token_type === 'ocean') {
                        myOauthCallBackService.handleJetonOcean(tokenValue, () => mySuccessLH.successLogin(myRefreshService), () => myFailureLH.failureLogin(myLoginService))
                            .then(() => {
                            myRefreshService.initierRafraichissement();
                            resolve(true);
                        });
                    }
                }
            });
        });
    }
    // Mode de connexion Cross-Domain via passage de Jeton avec usage URLFragment
    // Usage limité à des jetons <2ko pour IE
    connexionViaURLFragment(routeFragment) {
        return new Promise((resolve) => {
            this.oauthCallBackService
                .handleFragment(routeFragment, () => this.successLH.successLogin(this.refreshService), () => this.failureLH.failureLogin(this.loginService))
                .then(() => {
                this.refreshService.initierRafraichissement();
                resolve(true);
            }).catch(function () { }); // prevents "Uncaught (in promise) error
        });
    }
    sendReadyWebMessageHTML5() {
        const message = new AuthImplicitGuard.ReadyWebMessage(this.environment.jetonReadyTopic, null);
        window.parent.postMessage(message, '*');
    }
}
AuthImplicitGuard.ReadyWebMessage = class {
    constructor(aTopic, aData) {
        this.topic = aTopic;
        this.data = aData;
    }
};
AuthImplicitGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: AuthImplicitGuard, deps: [{ token: PRISME_SUCCESS_LOGIN_HANDLER }, { token: PRISME_FAILURE_LOGIN_HANDLER }, { token: PrismeAngularConfiguration }, { token: i1.OauthService }, { token: i2.LoginService }, { token: i3.OauthCallbackService }, { token: i4.RefreshService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
AuthImplicitGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: AuthImplicitGuard, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: AuthImplicitGuard, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PRISME_SUCCESS_LOGIN_HANDLER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PRISME_FAILURE_LOGIN_HANDLER]
                }] }, { type: i5.PrismeAngularConfiguration, decorators: [{
                    type: Inject,
                    args: [PrismeAngularConfiguration]
                }] }, { type: i1.OauthService }, { type: i2.LoginService }, { type: i3.OauthCallbackService }, { type: i4.RefreshService }, { type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,