import { InjectionToken } from '@angular/core';
// Token permettant d'injecter le success_handler
export const PRISME_SUCCESS_LOGIN_HANDLER = new InjectionToken('PRISME_SUCCESS_LOGIN_HANDLER');
// Token permettant d'injecter le success_handler
export const PRISME_FAILURE_LOGIN_HANDLER = new InjectionToken('PRISME_FAILURE_LOGIN_HANDLER');
// Classe permettant de travailler sur les paramètres fournie par l'application afin d'ajouter du comportement
// Cette classe est la configuration "interne" de la librairie prisme
// A la constrcution on copie l'ensemble des paramètres écrits dans la configuration de l'application appelante dans cette classe
// @Injectable({
//   providedIn: 'root'
// })
export class PrismeAngularConfiguration {
    constructor(appconf) {
        this.appconf = appconf;
        // Si appConf n'est pas null, alors on contruit la configuration a partir de appConf
        // Sinon, la classe appelante doit fournir les informations "une à une"
        if (appconf) {
            // Vérification des urls des Enpoints et affectation des endpoints à partir de prismeUrlBaseEndpoints (si )
            this.setPrismeEndpoints(appconf);
            this.prismeIss = this.appconf.prismeIss;
            this.prismeScopeBack = this.appconf.prismeScopeBack;
            this.prismeClientSecret = this.appconf.prismeClientSecret;
            this.prismeClientId = this.appconf.prismeClientId;
            this.prismeCodeApp = this.appconf.prismeCodeApp;
            this.prismeScopeFront = this.appconf.prismeScopeFront;
            this.applicationUri = this.addHttpIsNecessary(this.appconf.applicationUri);
            this.prismeRefreshTokensInterval = this.appconf.prismeRefreshTokensInterval;
            this.iFrameRenouvellement = this.appconf.iFrameRenouvellement;
            this.pageApresConnexion = this.appconf.pageApresConnexion;
            this.chargerUserInfosBack = this.appconf.chargerUserInfosBack;
            this.chargerUserInfosFront = this.appconf.chargerUserInfosFront;
            this.jetonReadyTopic = this.appconf.jetonReadyTopic;
            this.jetonMessageTopic = this.appconf.jetonMessageTopic;
            this.waitWebMessageURLFragment = this.appconf.waitWebMessageURLFragment;
        }
    }
    replaceIfNull(parameterToTest, replaceBy) {
        if (parameterToTest == null) {
            return replaceBy;
        }
        else {
            return parameterToTest;
        }
    }
    addHttpIsNecessary(parameterToTest) {
        if (parameterToTest.startsWith('http')) {
            return parameterToTest;
        }
        else {
            return 'http://' + parameterToTest;
        }
    }
    /**
     * Affecte les endPoints à partir de prismeUrlBaseEndpoint
     * Vérifie si les valeurs sont bien affectées
     * @param length Longueur
     */
    setPrismeEndpoints(conf) {
        if (conf.prismeUrlBaseEndpoint != null) {
            this.prismeUrlBaseEndpoint = conf.prismeUrlBaseEndpoint;
            // On enleve le / a la fin si il est présent
            if (this.prismeUrlBaseEndpoint.endsWith('/')) {
                this.prismeUrlBaseEndpoint = this.prismeUrlBaseEndpoint.slice(0, this.prismeUrlBaseEndpoint.length - 1);
            }
            this.prismeAuthzEndpoint = this.replaceIfNull(conf.prismeAuthzEndpoint, this.prismeUrlBaseEndpoint + '/security/v1/pss/authz');
            this.prismeTokenEndpoint = this.replaceIfNull(conf.prismeTokenEndpoint, this.prismeUrlBaseEndpoint + '/security/v1/pss/token');
            this.prismeKeysEndpoint = this.replaceIfNull(conf.prismeKeysEndpoint, this.prismeUrlBaseEndpoint + '/security/v1/pss/jwks/public');
            this.prismeUserEndpoint = this.replaceIfNull(conf.prismeUserEndpoint, this.prismeUrlBaseEndpoint + '/security/v1/pss/user-info');
        }
        else {
            this.prismeAuthzEndpoint = conf.prismeAuthzEndpoint;
            this.prismeTokenEndpoint = conf.prismeTokenEndpoint;
            this.prismeKeysEndpoint = conf.prismeKeysEndpoint;
            this.prismeUserEndpoint = conf.prismeUserEndpoint;
        }
        // On remplace les // par des / car pose problème
        this.prismeAuthzEndpoint = this.prismeAuthzEndpoint.replace(/([^:]\/)\/+/g, '$1');
        this.prismeTokenEndpoint = this.prismeTokenEndpoint.replace(/([^:]\/)\/+/g, '$1');
        this.prismeKeysEndpoint = this.prismeKeysEndpoint.replace(/([^:]\/)\/+/g, '$1');
        this.prismeUserEndpoint = this.prismeUserEndpoint.replace(/([^:]\/)\/+/g, '$1');
    }
}
//# sourceMappingURL=data:application/json;base64,