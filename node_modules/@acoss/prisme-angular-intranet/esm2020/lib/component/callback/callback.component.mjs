import { Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../prisme-angular.config";
import * as i2 from "../../prisme-angular-init.config";
import * as i3 from "@angular/router";
export class CallbackComponent {
    constructor(environment, prismeAngularInitConfig, router) {
        this.environment = environment;
        this.prismeAngularInitConfig = prismeAngularInitConfig;
        this.router = router;
    }
    ngOnInit() {
        // Récupération du paramètre pageFrom dans le sessionStorage (le pageFrom n'est pas présent lorsqu'on provient d'un portail)
        const pageFrom = sessionStorage.getItem(this.prismeAngularInitConfig.cleStockagePageFrom);
        // Si pageFrom est null alors on provient d'un portail --> pas besoin de redirection
        if (pageFrom) {
            // Redirection vers la page pageFrom
            this.router.navigate([pageFrom]);
        }
    }
}
CallbackComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: CallbackComponent, deps: [{ token: i1.PrismeAngularConfiguration }, { token: i2.PrismeAngularInitConfig }, { token: i3.Router }], target: i0.ɵɵFactoryTarget.Component });
CallbackComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.0", type: CallbackComponent, selector: "lib-callback", ngImport: i0, template: "<p>\n   R&eacute;cup&eacute;ration des infos de connexion en cours...\n</p>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: CallbackComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-callback', template: "<p>\n   R&eacute;cup&eacute;ration des infos de connexion en cours...\n</p>\n" }]
        }], ctorParameters: function () { return [{ type: i1.PrismeAngularConfiguration }, { type: i2.PrismeAngularInitConfig }, { type: i3.Router }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbGJhY2suY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWNvc3MvcHJpc21lLWFuZ3VsYXItaW50cmFuZXQvc3JjL2xpYi9jb21wb25lbnQvY2FsbGJhY2svY2FsbGJhY2suY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYWNvc3MvcHJpc21lLWFuZ3VsYXItaW50cmFuZXQvc3JjL2xpYi9jb21wb25lbnQvY2FsbGJhY2svY2FsbGJhY2suY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFTbEQsTUFBTSxPQUFPLGlCQUFpQjtJQUc1QixZQUNrQixXQUF1QyxFQUN2Qyx1QkFBZ0QsRUFDaEQsTUFBYztRQUZkLGdCQUFXLEdBQVgsV0FBVyxDQUE0QjtRQUN2Qyw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBQ2hELFdBQU0sR0FBTixNQUFNLENBQVE7SUFFaEMsQ0FBQztJQUVELFFBQVE7UUFDTiw0SEFBNEg7UUFDNUgsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUMxRixvRkFBb0Y7UUFDcEYsSUFBSSxRQUFRLEVBQUU7WUFDWixvQ0FBb0M7WUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ2xDO0lBQ0gsQ0FBQzs7OEdBbEJVLGlCQUFpQjtrR0FBakIsaUJBQWlCLG9EQ1Q5QiwrRUFHQTsyRkRNYSxpQkFBaUI7a0JBSjdCLFNBQVM7K0JBQ0UsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUHJpc21lQW5ndWxhckNvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi8uLi9wcmlzbWUtYW5ndWxhci5jb25maWcnO1xuaW1wb3J0IHsgUHJpc21lQW5ndWxhckluaXRDb25maWcgfSBmcm9tICcuLi8uLi9wcmlzbWUtYW5ndWxhci1pbml0LmNvbmZpZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xpYi1jYWxsYmFjaycsXG4gIHRlbXBsYXRlVXJsOiAnLi9jYWxsYmFjay5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQ2FsbGJhY2tDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG5cbiAgY29uc3RydWN0b3IoXG4gICAgICAgICAgcHJvdGVjdGVkIGVudmlyb25tZW50OiBQcmlzbWVBbmd1bGFyQ29uZmlndXJhdGlvbixcbiAgICAgICAgICBwcm90ZWN0ZWQgcHJpc21lQW5ndWxhckluaXRDb25maWc6IFByaXNtZUFuZ3VsYXJJbml0Q29uZmlnLFxuICAgICAgICAgIHByb3RlY3RlZCByb3V0ZXI6IFJvdXRlclxuICAgICAgICAgICkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgLy8gUsOpY3Vww6lyYXRpb24gZHUgcGFyYW3DqHRyZSBwYWdlRnJvbSBkYW5zIGxlIHNlc3Npb25TdG9yYWdlIChsZSBwYWdlRnJvbSBuJ2VzdCBwYXMgcHLDqXNlbnQgbG9yc3F1J29uIHByb3ZpZW50IGQndW4gcG9ydGFpbClcbiAgICBjb25zdCBwYWdlRnJvbSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0odGhpcy5wcmlzbWVBbmd1bGFySW5pdENvbmZpZy5jbGVTdG9ja2FnZVBhZ2VGcm9tKTtcbiAgICAvLyBTaSBwYWdlRnJvbSBlc3QgbnVsbCBhbG9ycyBvbiBwcm92aWVudCBkJ3VuIHBvcnRhaWwgLS0+IHBhcyBiZXNvaW4gZGUgcmVkaXJlY3Rpb25cbiAgICBpZiAocGFnZUZyb20pIHtcbiAgICAgIC8vIFJlZGlyZWN0aW9uIHZlcnMgbGEgcGFnZSBwYWdlRnJvbVxuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW3BhZ2VGcm9tXSk7XG4gICAgfVxuICB9XG59XG5cbiIsIjxwPlxuICAgUiZlYWN1dGU7Y3VwJmVhY3V0ZTtyYXRpb24gZGVzIGluZm9zIGRlIGNvbm5leGlvbiBlbiBjb3Vycy4uLlxuPC9wPlxuIl19