import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../service/login.service";
/**
 * Intercepteur qui ajoute à toutes les requêtes le jeton dans l'entête Bearer
 * Ne fait rien si l'utilisateur n'est pas connecté
 */
export class PrismeBearerInterceptor {
    constructor(loginService) {
        this.loginService = loginService;
    }
    intercept(req, next) {
        // Si l'utilisateur est connecté et que l'on a pas déjà un jeton ajouté au moment de la création de la requête
        if (this.loginService.isConnecte() && !this.hasBearerToken(req)) {
            // Ajout de l'access token
            return next.handle(this.ajoutJeton(req));
        }
        // Sinon, rien à faire
        return next.handle(req);
    }
    // Ajoute le jeton dans l'entête Bearer
    ajoutJeton(req) {
        const headers = {
            Authorization: 'Bearer ' + this.loginService.getAccessTokenBack()
        };
        return req.clone({ setHeaders: headers });
    }
    /**
     * Vérifie si on a déjà le jeton d'authentification dans les entêtes de la requête
     * @param req la requête http
     */
    hasBearerToken(req) {
        if (req.headers.has('Authorization')) {
            const headers = req.headers.getAll('Authorization');
            if (headers.find(value => value.startsWith('Bearer ') === true)) {
                return true;
            }
        }
        return false;
    }
}
PrismeBearerInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: PrismeBearerInterceptor, deps: [{ token: i1.LoginService }], target: i0.ɵɵFactoryTarget.Injectable });
PrismeBearerInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: PrismeBearerInterceptor });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: PrismeBearerInterceptor, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LoginService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpc21lLWJlYXJlci1pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Fjb3NzL3ByaXNtZS1hbmd1bGFyLWludHJhbmV0L3NyYy9saWIvaW50ZXJjZXB0b3IvcHJpc21lLWJlYXJlci1pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDOzs7QUFNekM7OztHQUdHO0FBRUgsTUFBTSxPQUFPLHVCQUF1QjtJQUNsQyxZQUFzQixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUFHLENBQUM7SUFFcEQsU0FBUyxDQUFDLEdBQXFCLEVBQUUsSUFBaUI7UUFDaEQsOEdBQThHO1FBQzlHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDL0QsMEJBQTBCO1lBQzFCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDMUM7UUFFRCxzQkFBc0I7UUFDdEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCx1Q0FBdUM7SUFDdkMsVUFBVSxDQUFDLEdBQXFCO1FBQzlCLE1BQU0sT0FBTyxHQUFHO1lBQ2QsYUFBYSxFQUFFLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGtCQUFrQixFQUFFO1NBQ2xFLENBQUM7UUFFRixPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBQyxVQUFVLEVBQUUsT0FBTyxFQUFDLENBQUUsQ0FBQztJQUMzQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssY0FBYyxDQUFDLEdBQXFCO1FBQzFDLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFDcEMsTUFBTSxPQUFPLEdBQWEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDOUQsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRTtnQkFDL0QsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOztvSEFuQ1UsdUJBQXVCO3dIQUF2Qix1QkFBdUI7MkZBQXZCLHVCQUF1QjtrQkFEbkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3R9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0xvZ2luU2VydmljZX0gZnJvbSAnLi4vc2VydmljZS9sb2dpbi5zZXJ2aWNlJztcblxuXG4vKipcbiAqIEludGVyY2VwdGV1ciBxdWkgYWpvdXRlIMOgIHRvdXRlcyBsZXMgcmVxdcOqdGVzIGxlIGpldG9uIGRhbnMgbCdlbnTDqnRlIEJlYXJlclxuICogTmUgZmFpdCByaWVuIHNpIGwndXRpbGlzYXRldXIgbidlc3QgcGFzIGNvbm5lY3TDqVxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJpc21lQmVhcmVySW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2UpIHt9XG5cbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgLy8gU2kgbCd1dGlsaXNhdGV1ciBlc3QgY29ubmVjdMOpIGV0IHF1ZSBsJ29uIGEgcGFzIGTDqWrDoCB1biBqZXRvbiBham91dMOpIGF1IG1vbWVudCBkZSBsYSBjcsOpYXRpb24gZGUgbGEgcmVxdcOqdGVcbiAgICBpZiAodGhpcy5sb2dpblNlcnZpY2UuaXNDb25uZWN0ZSgpICYmICF0aGlzLmhhc0JlYXJlclRva2VuKHJlcSkpIHtcbiAgICAgIC8vIEFqb3V0IGRlIGwnYWNjZXNzIHRva2VuXG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUodGhpcy5ham91dEpldG9uKHJlcSkpO1xuICAgIH1cblxuICAgIC8vIFNpbm9uLCByaWVuIMOgIGZhaXJlXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XG4gIH1cblxuICAvLyBBam91dGUgbGUgamV0b24gZGFucyBsJ2VudMOqdGUgQmVhcmVyXG4gIGFqb3V0SmV0b24ocmVxOiBIdHRwUmVxdWVzdDxhbnk+KSB7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgIEF1dGhvcml6YXRpb246ICdCZWFyZXIgJyArIHRoaXMubG9naW5TZXJ2aWNlLmdldEFjY2Vzc1Rva2VuQmFjaygpXG4gICAgfTtcblxuICAgIHJldHVybiByZXEuY2xvbmUoe3NldEhlYWRlcnM6IGhlYWRlcnN9ICk7XG4gIH1cblxuICAvKipcbiAgICogVsOpcmlmaWUgc2kgb24gYSBkw6lqw6AgbGUgamV0b24gZCdhdXRoZW50aWZpY2F0aW9uIGRhbnMgbGVzIGVudMOqdGVzIGRlIGxhIHJlcXXDqnRlXG4gICAqIEBwYXJhbSByZXEgbGEgcmVxdcOqdGUgaHR0cFxuICAgKi9cbiAgcHJpdmF0ZSBoYXNCZWFyZXJUb2tlbihyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuIHtcbiAgICBpZiAocmVxLmhlYWRlcnMuaGFzKCdBdXRob3JpemF0aW9uJykpIHtcbiAgICAgIGNvbnN0IGhlYWRlcnM6IHN0cmluZ1tdID0gcmVxLmhlYWRlcnMuZ2V0QWxsKCdBdXRob3JpemF0aW9uJyk7XG4gICAgICBpZiAoaGVhZGVycy5maW5kKHZhbHVlID0+IHZhbHVlLnN0YXJ0c1dpdGgoJ0JlYXJlciAnKSA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl19