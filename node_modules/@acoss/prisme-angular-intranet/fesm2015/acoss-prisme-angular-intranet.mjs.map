{"version":3,"file":"acoss-prisme-angular-intranet.mjs","sources":["../../../../projects/acoss/prisme-angular-intranet/src/lib/handler/abstract-success-login.handler.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/handler/abstract-failure-login.handler.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/prisme-angular.config.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/prisme-angular-init.config.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/component/callback/callback.component.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/component/callback/callback.component.html","../../../../projects/acoss/prisme-angular-intranet/src/lib/service/oauth.service.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/model/infos-utilisateur.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/service/access-token.service.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/service/login.service.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/service/oauth-validation.service.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/service/oauth-callback.service.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/service/refresh.service.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/auth-implicit.guard.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/interceptor/prisme-bearer-interceptor.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/prisme-angular-init.module.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/handler/default-failure-login.handler.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/handler/default-success-login.handler.ts","../../../../projects/acoss/prisme-angular-intranet/src/lib/prisme-angular.module.ts","../../../../projects/acoss/prisme-angular-intranet/src/public_api.ts","../../../../projects/acoss/prisme-angular-intranet/src/acoss-prisme-angular-intranet.ts"],"sourcesContent":["import { SuccessLoginHandlerInterface } from './success-login-handler-interface';\n\nexport abstract class AbstractSuccessLoginHandler implements SuccessLoginHandlerInterface {\n    successLogin() {\n      this.postSuccessLogin();\n    }\n    abstract postSuccessLogin(): any;\n}\n\n","import { LoginService } from '../service/login.service';\nimport { FailureLoginHandlerInterface } from './failure-login-handler-interface';\n\nexport abstract class AbstractFailureLoginHandler implements FailureLoginHandlerInterface {\n      failureLogin(loginService: LoginService) {\n        // On Force la déconnection si l'utilisateur ne s'est pas authentifié correctement\n      loginService.deconnecter();\n      console.log('Dans AbstractFailureLoginHandler');\n      this.postFailureLogin();\n    }\n    abstract postFailureLogin();\n}\n\n","import { InjectionToken } from '@angular/core';\nimport { AbstractSuccessLoginHandler } from './handler/abstract-success-login.handler';\nimport { FailureLoginHandlerInterface } from './handler/failure-login-handler-interface';\n\n\n\n// Token permettant d'injecter le success_handler\nexport const PRISME_SUCCESS_LOGIN_HANDLER = new InjectionToken<AbstractSuccessLoginHandler>('PRISME_SUCCESS_LOGIN_HANDLER');\n\n// Token permettant d'injecter le success_handler\nexport const PRISME_FAILURE_LOGIN_HANDLER = new InjectionToken<FailureLoginHandlerInterface>('PRISME_FAILURE_LOGIN_HANDLER');\n\n// Token permettant de faire l'injection dans PrismeAngularConfiguration\n// export const CONFIG_FROM_APP = new InjectionToken<EnvironmentConfigFromApp>(\n//   'EnvironmentConfigFromApp'\n// );\n\n// Interface permettant décrire les paramètres modifiables par l'application appellante\n// A ne pas utiliser dans la librairie prisme --> utiliser plutôt PriseAngularConfiguration\n// Le but étant que la classe de paramètre de l'application appelante ne soit pas directement utilisée dans la\n// librairie prisme. On fait donc une copie de cette configuration dans la classe de configuration\n// propre à Prisme (PriseAngularConfiguration)\nexport interface EnvironmentConfigFromApp {\n    prismeUrlBaseEndpoint?: string;\n    prismeAuthzEndpoint?: string;\n    prismeTokenEndpoint?: string;\n    prismeKeysEndpoint?: string;\n    prismeUserEndpoint?: string;\n    prismeIss: string;\n    prismeScopeBack: string;\n    prismeClientSecret: string;\n    prismeClientId: string;\n    prismeCodeApp: string;\n    prismeScopeFront: string;\n    applicationUri: string;\n    prismeRefreshTokensInterval: number;\n    iFrameRenouvellement: string;\n    pageApresConnexion?: string;\n    chargerUserInfosFront: boolean;\n    chargerUserInfosBack: boolean;\n    jetonReadyTopic: string;\n    jetonMessageTopic: string;\n    waitWebMessageURLFragment: string;\n }\n\n\n// Classe permettant de travailler sur les paramètres fournie par l'application afin d'ajouter du comportement\n// Cette classe est la configuration \"interne\" de la librairie prisme\n// A la constrcution on copie l'ensemble des paramètres écrits dans la configuration de l'application appelante dans cette classe\n// @Injectable({\n//   providedIn: 'root'\n// })\nexport class PrismeAngularConfiguration implements EnvironmentConfigFromApp {\n\n  prismeUrlBaseEndpoint: string;\n  prismeAuthzEndpoint: string;\n  prismeTokenEndpoint: string;\n  prismeKeysEndpoint: string;\n  prismeUserEndpoint: string;\n  prismeIss: string;\n  prismeScopeBack: string;\n  prismeClientSecret: string;\n  prismeClientId: string;\n  prismeCodeApp: string;\n  prismeScopeFront: string;\n  applicationUri: string;\n  prismeRefreshTokensInterval: number;\n  iFrameRenouvellement: string;\n  pageApresConnexion: string;\n  chargerUserInfosFront: boolean;\n  chargerUserInfosBack: boolean;\n  jetonReadyTopic: string;\n  jetonMessageTopic: string;\n  waitWebMessageURLFragment: string;\n\n  replaceIfNull(parameterToTest, replaceBy) {\n    if (parameterToTest == null ) {\n      return replaceBy;\n    } else {\n      return parameterToTest;\n    }\n  }\n\n  addHttpIsNecessary(parameterToTest) {\n    if (parameterToTest.startsWith('http') ) {\n      return parameterToTest;\n    } else {\n      return 'http://' + parameterToTest;\n    }\n  }\n  /**\n   * Affecte les endPoints à partir de prismeUrlBaseEndpoint\n   * Vérifie si les valeurs sont bien affectées\n   * @param length Longueur\n   */\n  setPrismeEndpoints(conf: EnvironmentConfigFromApp) {\n    if (conf.prismeUrlBaseEndpoint != null) {\n      this.prismeUrlBaseEndpoint = conf.prismeUrlBaseEndpoint;\n      // On enleve le / a la fin si il est présent\n      if (this.prismeUrlBaseEndpoint.endsWith('/')) {\n        this.prismeUrlBaseEndpoint = this.prismeUrlBaseEndpoint.slice(0, this.prismeUrlBaseEndpoint.length - 1);\n      }\n      this.prismeAuthzEndpoint = this.replaceIfNull(conf.prismeAuthzEndpoint, this.prismeUrlBaseEndpoint + '/security/v1/pss/authz');\n      this.prismeTokenEndpoint = this.replaceIfNull(conf.prismeTokenEndpoint, this.prismeUrlBaseEndpoint + '/security/v1/pss/token');\n      this.prismeKeysEndpoint = this.replaceIfNull(conf.prismeKeysEndpoint, this.prismeUrlBaseEndpoint + '/security/v1/pss/jwks/public');\n      this.prismeUserEndpoint = this.replaceIfNull(conf.prismeUserEndpoint, this.prismeUrlBaseEndpoint + '/security/v1/pss/user-info');\n    } else {\n      this.prismeAuthzEndpoint = conf.prismeAuthzEndpoint;\n      this.prismeTokenEndpoint = conf.prismeTokenEndpoint;\n      this.prismeKeysEndpoint = conf.prismeKeysEndpoint;\n      this.prismeUserEndpoint = conf.prismeUserEndpoint;\n    }\n\n    // On remplace les // par des / car pose problème\n    this.prismeAuthzEndpoint = this.prismeAuthzEndpoint.replace(/([^:]\\/)\\/+/g, '$1');\n    this.prismeTokenEndpoint = this.prismeTokenEndpoint.replace(/([^:]\\/)\\/+/g, '$1');\n    this.prismeKeysEndpoint = this.prismeKeysEndpoint.replace(/([^:]\\/)\\/+/g, '$1');\n    this.prismeUserEndpoint = this.prismeUserEndpoint.replace(/([^:]\\/)\\/+/g, '$1');\n  }\n\n  constructor (private appconf?: EnvironmentConfigFromApp) {\n    // Si appConf n'est pas null, alors on contruit la configuration a partir de appConf\n    // Sinon, la classe appelante doit fournir les informations \"une à une\"\n    if (appconf) {\n      // Vérification des urls des Enpoints et affectation des endpoints à partir de prismeUrlBaseEndpoints (si )\n      this.setPrismeEndpoints(appconf);\n      this.prismeIss = this.appconf.prismeIss;\n      this.prismeScopeBack = this.appconf.prismeScopeBack;\n      this.prismeClientSecret = this.appconf.prismeClientSecret;\n      this.prismeClientId = this.appconf.prismeClientId;\n      this.prismeCodeApp = this.appconf.prismeCodeApp;\n      this.prismeScopeFront = this.appconf.prismeScopeFront;\n      this.applicationUri = this.addHttpIsNecessary(this.appconf.applicationUri);\n      this.prismeRefreshTokensInterval = this.appconf.prismeRefreshTokensInterval;\n      this.iFrameRenouvellement = this.appconf.iFrameRenouvellement;\n      this.pageApresConnexion = this.appconf.pageApresConnexion;\n      this.chargerUserInfosBack = this.appconf.chargerUserInfosBack;\n      this.chargerUserInfosFront = this.appconf.chargerUserInfosFront;\n      this.jetonReadyTopic = this.appconf.jetonReadyTopic;\n      this.jetonMessageTopic = this.appconf.jetonMessageTopic;\n      this.waitWebMessageURLFragment = this.appconf.waitWebMessageURLFragment;\n    }\n  }\n\n}\n","import { Inject, Injectable, InjectionToken } from '@angular/core';\n\nexport const CLE_STOCKAGE = new InjectionToken<string>('CLE_STOCKAGE');\nexport const UTILISER_LOCAL_STORAGE_TOKEN = new InjectionToken<string>('UTILISER_LOCAL_STORAGE_TOKEN');\n\n@Injectable()\nexport  class PrismeAngularInitConfig {\n  idCleStockage: string;\n  cleStockageInfosUtilisateur: string;\n  cleStockageDernierNonce: string;\n  cleStockageDernierState: string;\n  cleStockageStateUtilise: string;\n  cleStockageEtatRafraichissement: string;\n  cleStockagePageFrom: string;\n  utiliserLocalStorage: boolean;\n\n  private setCleStockage(idCleStockage: string) {\n    this.idCleStockage = idCleStockage;\n    this.cleStockageInfosUtilisateur = this.idCleStockage + '_User';\n    this.cleStockageDernierNonce = this.idCleStockage + '_Nonce';\n    this.cleStockageDernierState = this.idCleStockage + '_LastState';\n    this.cleStockageStateUtilise = this.idCleStockage + '_UsedState';\n    this.cleStockageEtatRafraichissement = this.idCleStockage + '_RefreshState';\n    this.cleStockagePageFrom = this.idCleStockage + '_PageFrom';\n  }\n\n  constructor( @Inject(CLE_STOCKAGE) cleStockage: string,\n               @Inject(UTILISER_LOCAL_STORAGE_TOKEN) utiliserLocalStorageToken: boolean) {\n    if ( cleStockage) {\n      this.setCleStockage(cleStockage);\n    } else {\n      this.setCleStockage('defaultPrismeStorageKey');\n    }\n\n    if (utiliserLocalStorageToken) {\n      this.utiliserLocalStorage = utiliserLocalStorageToken;\n    } else {\n      this.utiliserLocalStorage = false;\n    }\n  }\n}\n\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { PrismeAngularConfiguration } from '../../prisme-angular.config';\nimport { PrismeAngularInitConfig } from '../../prisme-angular-init.config';\n\n@Component({\n  selector: 'lib-callback',\n  templateUrl: './callback.component.html'\n})\nexport class CallbackComponent implements OnInit {\n\n\n  constructor(\n          protected environment: PrismeAngularConfiguration,\n          protected prismeAngularInitConfig: PrismeAngularInitConfig,\n          protected router: Router\n          ) {\n  }\n\n  ngOnInit() {\n    // Récupération du paramètre pageFrom dans le sessionStorage (le pageFrom n'est pas présent lorsqu'on provient d'un portail)\n    const pageFrom = sessionStorage.getItem(this.prismeAngularInitConfig.cleStockagePageFrom);\n    // Si pageFrom est null alors on provient d'un portail --> pas besoin de redirection\n    if (pageFrom) {\n      // Redirection vers la page pageFrom\n      this.router.navigate([pageFrom]);\n    }\n  }\n}\n\n","<p>\n   R&eacute;cup&eacute;ration des infos de connexion en cours...\n</p>\n","import { Inject, Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport * as pako from 'pako';\nimport { PrismeAngularConfiguration } from '../prisme-angular.config';\nimport { PrismeAngularInitConfig } from '../prisme-angular-init.config';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OauthService {\n\n  public static readonly NONCE_LENGTH = 50;\n  public static readonly STATE_LENGTH = 50;\n\n  /** Chaines spécifiques à OIDC */\n  private readonly response_type = 'token id_token';\n  private readonly grant_type_jwt = 'urn:ietf:params:oauth:grant-type:jwt-bearer';\n  private readonly assertion_type_jwt = 'jwt_token';\n  private readonly grant_type_ocean = 'ocean_bearer';\n  private readonly assertion_type_ocean = 'ocean_token';\n\n  constructor(@Inject(PrismeAngularConfiguration) private environment: PrismeAngularConfiguration,\n  protected prismeAngularInitConfig: PrismeAngularInitConfig,\n  private router: Router ) {\n  }\n\n    private savePageFrom(url: string) {\n      sessionStorage.setItem(this.prismeAngularInitConfig.cleStockagePageFrom, url);\n    }\n  /**\n   * Renvoie l'URL vers la mire de login pour authentification\n   */\n  authentificationFrontUrl(url: string) {\n    this.savePageFrom(url);\n    const response_type = encodeURIComponent(this.response_type);\n    const redirect_uri = encodeURIComponent(this.environment.applicationUri + '/retour_pss');\n    const scope = encodeURIComponent(this.environment.prismeScopeFront);\n    const client_id = this.environment.prismeCodeApp;\n\n    const nonce = encodeURIComponent(this.randomString(OauthService.NONCE_LENGTH));\n    const state = encodeURIComponent(this.randomString(OauthService.STATE_LENGTH));\n\n    sessionStorage.setItem(this.prismeAngularInitConfig.cleStockageDernierNonce, nonce);\n    sessionStorage.setItem(this.prismeAngularInitConfig.cleStockageDernierState, state);\n\n    // Construction de l'URL vers la mire de login\n    const url_endpointLogin = this.environment.prismeAuthzEndpoint;\n    return url_endpointLogin + '?response_type=' + response_type\n      + '&client_id=' + client_id\n      + '&redirect_uri=' + redirect_uri\n      + '&scope=' + scope\n      + '&nonce=' + nonce\n      + '&state=' + state;\n  }\n\n  /**\n   * Renvoie un body de requête en mode assertion JWT\n   * @param assertion Jeton\n   */\n  authentificationBackAssertionJwt(assertion: string) {\n    const jwtRequestBody: any = {};\n\n    jwtRequestBody.grant_type = this.grant_type_jwt;\n\n    jwtRequestBody.client_id = this.environment.prismeClientId;\n    jwtRequestBody.client_secret = this.environment.prismeClientSecret;\n    jwtRequestBody.assertion_type = this.assertion_type_jwt;\n\n    jwtRequestBody.assertion = assertion;\n\n    // Le scope doit etre compressé puis encodé en base 64\n\n    const compressed_scope = pako.gzip(this.environment.prismeScopeBack, {to: 'string'});\n    jwtRequestBody.scope = btoa(compressed_scope);\n\n    return jwtRequestBody;\n  }\n\n      /**\n\t * Renvoie un body de requête en mode assertion JWT\n\t * @param assertion Jeton\n\t */\n  authentificationFrontAssertionOcean(assertion: string) {\n    const jwtRequestBody: any = {};\n\n    jwtRequestBody.grant_type = this.grant_type_ocean;\n\n    jwtRequestBody.client_id = this.environment.prismeClientId;\n    jwtRequestBody.client_secret = this.environment.prismeClientSecret;\n    jwtRequestBody.assertion_type = this.assertion_type_ocean;\n\n    jwtRequestBody.assertion = assertion;\n\n    // Le scope doit etre compressé puis encodé en base 64\n    const compressed_scope = pako.gzip(this.environment.prismeScopeFront, {to: 'string'});\n    jwtRequestBody.scope = btoa(compressed_scope);\n\n    return jwtRequestBody;\n}\n\n  /**\n   * Récupère la dernière valeur du Nonce.\n   */\n  getLastNonce() {\n    return sessionStorage.getItem(this.prismeAngularInitConfig.cleStockageDernierNonce);\n  }\n\n  /**\n   * Récupère la dernière valeur du state.\n   */\n  getLastState() {\n    return sessionStorage.getItem(this.prismeAngularInitConfig.cleStockageDernierState);\n  }\n\n  /**\n   * Génère une chaine aléatoire pour le nonce/state\n   * @param length Longueur\n   */\n  private randomString(length: number) {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n\n  /**\n   * Vérifie s'il s'agit d'une ouverture en mode connexion WebMessaging\n   * @param fragmentValue Valeur d'URL Fragment\n   */\n  public isDelegatedOpeningWithWebMessage(fragmentValue: string): boolean {\n    return this.environment.waitWebMessageURLFragment === fragmentValue;\n  }\n\n}\n\n","/**\n * Permet d'acceder aux donnée fournie par le service user-info\n */\nexport class InfosUtilisateur {\n\n    // les données fournie pas user-infos en Json\n    private dataInfosUtilisateur: any;\n\n    constructor(data: any) {\n        this.dataInfosUtilisateur = data;\n    }\n\n    public getNom(): string {\n        return this.dataInfosUtilisateur.auser_sn;\n    }\n\n    public getPrenom(): string {\n        return this.dataInfosUtilisateur.auser_givenname;\n    }\n\n    /**\n     * Retourne uen chaine contenant le prénom et le nom de l'utilisateur\n     */\n    public getNomComplet(): string {\n        return this.dataInfosUtilisateur.auser_cn;\n    }\n\n    public getCodeAgent(): string {\n        return this.dataInfosUtilisateur.auser_uid;\n    }\n\n    public getIdSnv2(): string  {\n        return this.dataInfosUtilisateur.auser_idsnv2;\n    }\n\n    public getCodeOrganisme(): string  {\n        return this.dataInfosUtilisateur.auser_codeorg;\n    }\n\n    public getInterRegion(): string  {\n        return this.dataInfosUtilisateur.auser_ircode;\n    }\n\n    public getAdresseMail(): string  {\n        return this.dataInfosUtilisateur.auser_mail;\n    }\n\n    public getVille(): string  {\n        return this.dataInfosUtilisateur.auser_persnomville;\n    }\n\n    public getAdresseEtablissement(): string  {\n        return this.dataInfosUtilisateur.auser_etabaddr;\n    }\n\n    /**\n     * Retourne la liste des droits de l'utilisateur\n     */\n    public getDroits(): string[] {\n        return this.dataInfosUtilisateur.access;\n    }\n\n    /**\n     * Retourne les données fournie par le service user-info en JSon\n     */\n    public getDataInfosUtilisateur(): any {\n        return this.dataInfosUtilisateur;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport * as pako from 'pako';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Service permettant de décoder un access token et d'en extraire les informations\n */\nexport class AccessTokenService {\n\n  private jwtHelper: JwtHelperService;\n\n  constructor() {\n    this.jwtHelper = new JwtHelperService();\n  }\n\n  public getIdentifiantUtilisateur(accessToken: string): string {\n    return this.decodeAccessToken(accessToken).sub.split('@')[0];\n  }\n\n  public getDroitsUtilisateur(accessToken: string): any  {\n      // La liste des droits est située dans le \"aud\" du jeton d'accès au format base64\n      const decode_aud = atob(this.decodeAccessToken(accessToken).aud);\n\n      // Après décodage, la chaine est gzippée : utilisation de la bibliothèque pako pour décompresser\n      const droits_string = pako.inflate(decode_aud, { to: 'string' });\n\n      // Les droits FRONT sont séparés par un espace\n      return droits_string.split(' ');\n  }\n\n  public decodeAccessToken(accessToken: string): any {\n    return this.jwtHelper.decodeToken(accessToken);\n  }\n\n  public getTokenExpirationDate(accessToken: string): any {\n    return this.jwtHelper.getTokenExpirationDate(accessToken);\n  }\n\n  public isTokenExpired(accessToken: string): boolean {\n    return this.jwtHelper.isTokenExpired(accessToken);\n  }\n\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {PrismeAngularInitConfig} from '../prisme-angular-init.config';\nimport {InfosUtilisateur} from '../model/infos-utilisateur';\nimport { AccessTokenService } from './access-token.service';\n\nexport interface SessionUtilisateur {\n  accessTokenBack: string;\n  accessTokenFront: string;\n  oceanToken: string;\n  expiration: Date;\n  mode: string;\n  infosUtilisateurBack: any;\n  infosUtilisateurFront: any;\n  payload: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(@Inject(PrismeAngularInitConfig) private config: PrismeAngularInitConfig, private accessTokenService: AccessTokenService) {\n  }\n\n  /**\n   * Indique si l'utilisateur est connecté.\n   */\n  isConnecte(): boolean {\n    const logInfo = this.getInfos();\n    return logInfo !== null && logInfo.accessTokenBack !== null;\n  }\n\n  /**\n   * Renvoie toutes les informations\n   */\n  private getInfos(): SessionUtilisateur {\n    const infos = this.getStorage().getItem(this.config.cleStockageInfosUtilisateur);\n    if (infos === null) {\n      return null;\n    }\n\n    return JSON.parse(infos);\n  }\n\n  /**\n   * Renvoie les infos de l'utilisateur\n   */\n  getInfosUtilisateurBack(): InfosUtilisateur {\n    const infos = this.getInfos();\n    if (infos != null && infos.infosUtilisateurBack != null) {\n      return new InfosUtilisateur(infos.infosUtilisateurBack);\n    }\n\n    return null;\n  }\n\n  getInfosUtilisateurFront(): InfosUtilisateur {\n    const infos = this.getInfos();\n    if (infos != null && infos.infosUtilisateurFront != null) {\n      return new InfosUtilisateur(infos.infosUtilisateurFront);\n    }\n\n    return null;\n  }\n\n  /**\n   * Renvoie le payload\n   */\n  getPayload(): any {\n    const infos = this.getInfos();\n    if (infos === null) {\n      return null;\n    }\n\n    return infos.payload;\n  }\n\n  /**\n   * Renvoie les droits de l'utilisateur pour le frontend\n   */\n  getDroitsUtilisateur(): any {\n    const sessionUtilisateur = this.getInfos();\n    if (sessionUtilisateur === null) {\n      return null;\n    }\n    return this.accessTokenService.getDroitsUtilisateur(sessionUtilisateur.accessTokenFront);\n  }\n\n  /**\n   * Renvoie les droits de l'utilisateur pour le backend\n   */\n  getDroitsUtilisateurBack(): any {\n    const sessionUtilisateur = this.getInfos();\n    if (sessionUtilisateur === null) {\n      return null;\n    }\n    return this.accessTokenService.getDroitsUtilisateur(sessionUtilisateur.accessTokenBack);\n  }\n\n  getAccessTokenBack(): string {\n    const infos = this.getInfos();\n    if (infos === null) {\n      return null;\n    }\n\n    return infos.accessTokenBack;\n  }\n\n  getAccessTokenFront(): string {\n    const infos = this.getInfos();\n    if (infos === null) {\n      return null;\n    }\n\n    return infos.accessTokenFront;\n  }\n\n  getOceanToken(): string {\n    const infos = this.getInfos();\n    if (infos === null) {\n      return null;\n    }\n\n    return infos.oceanToken;\n  }\n\n  getMode(): string {\n    const infos = this.getInfos();\n    if (infos === null) {\n      return null;\n    }\n\n    return infos.mode ;\n  }\n\n  /**\n   * Enregistre les infos utilisateur\n   * @param infos Jeton\n   */\n  storeInfos(infos: SessionUtilisateur): void {\n    // On récupère le payload existant\n    let oldinfos: SessionUtilisateur;\n      oldinfos = JSON.parse(this.getStorage().getItem(this.config.cleStockageInfosUtilisateur));\n      if (oldinfos && infos) {\n        infos.payload = infos.payload || oldinfos.payload;\n      }\n    this.getStorage().setItem(this.config.cleStockageInfosUtilisateur, JSON.stringify(infos));\n  }\n\n  /**\n   * Pour le mode portail, permet de mettre à jour l'access token dans les infos utilisateur.\n   * @param accessToken Jeton\n   * @param expiration Date\n   */\n  updateAccessToken(accessToken: string, expiration: Date): void {\n    const infos = this.getInfos();\n    if (infos !== null) {\n      infos.accessTokenBack = accessToken;\n      infos.expiration = expiration;\n    }\n\n    this.storeInfos(infos);\n  }\n\n  /**\n   * Permet de mettre à jour les infos utilisateur.\n   * @param infosUtilisateur les infos utilisateur à mettre à jour\n   */\n  updateInfosUtilisateurBack(infosUtilisateur) {\n    const infos = this.getInfos();\n    if (infos !== null) {\n      infos.infosUtilisateurBack = infosUtilisateur;\n      this.storeInfos(infos);\n    }\n  }\n\n  /**\n   * Permet de mettre à jour les infos utilisateur.\n   * @param infosUtilisateur les infos utilisateur à mettre à jour\n   */\n  updateInfosUtilisateurFront(infosUtilisateur) {\n    const infos = this.getInfos();\n    if (infos !== null) {\n      infos.infosUtilisateurFront = infosUtilisateur;\n      this.storeInfos(infos);\n    }\n  }\n\n  public getIdentifiantUtilisateur(): string {\n    const sessionUtilisateur = this.getInfos();\n    return this.accessTokenService.getIdentifiantUtilisateur(sessionUtilisateur.accessTokenFront);\n  }\n\n    /**\n   * Permet de mettre à jour le payload\n   * @param payload a mettre à jour\n   */\n  updatePayload(payload) {\n    const infos = this.getInfos();\n    if (infos !== null) {\n      infos.payload = payload;\n      this.storeInfos(infos);\n    }\n  }\n  /**\n   * Controle si les données utilisateur contiennent bien les droits demandés\n   * @param droits Liste des droits\n   */\n  estAutorise(droits: string[]) {\n    return this.checkAutorisation(droits, this.getDroitsUtilisateur());\n  }\n\n  /**\n   * Controle si les données utilisateur contiennent bien les droits demandés pour le backend\n   * @param droits Liste des droits\n   */\n  estAutoriseBack(droits: string[]) {\n    return this.checkAutorisation(droits, this.getDroitsUtilisateurBack());\n  }\n\n  private checkAutorisation(droits: string[], droitsJeton: any): boolean {\n    if (!this.isConnecte()) {\n      return false;\n    }\n    for (const droit of droits) {\n      if (this.controleAutorisation(droit, droitsJeton)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Controle si les données utilisateur contiennent bien le droit spécifique demandé\n   * On considère que les droits sont de la forme <perimetre>:<application>:<profil>\n   * @param droit Droit\n   * @param droitsJeton la liste des droits contenu dans le jeton\n   */\n  private controleAutorisation(droit: string, droitsJeton: any) {\n    if (!droitsJeton) {\n      return false;\n    }\n\n    // Si la chaine <perimetre>:<application>:<profil> contient le droit, alors l'utilisateur est autorisé\n    for (const droitJeton of droitsJeton) {\n      const values: any[] = droitJeton.split(':');\n      if (values && -1 !== values.indexOf(droit)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Déconnecter\n   * @returns Promise<any> renvoi resolve(true) lorsque la déconnexion est terminée\n   */\n  deconnecter(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.getStorage().clear();\n      localStorage.clear();\n      resolve(true);\n    });\n  }\n\n\n  private getStorage() {\n    if (this.config.utiliserLocalStorage) {\n      return localStorage;\n    }\n    return sessionStorage;\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport * as jsrsasign from 'jsrsasign';\nimport { PrismeAngularConfiguration } from '../prisme-angular.config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OauthValidationService {\n\n  constructor(@Inject(PrismeAngularConfiguration) private environment: PrismeAngularConfiguration) { }\n\n  /**\n   * Valider que le champ \"iss\" du token correspond bien au provider\n   * \"Malicious compliance\" vis à vis du guide développeur\n   * @param token Jeton\n   */\n  validerIss(token: any) {\n    return token.iss === this.environment.prismeIss;\n  }\n\n\n  /**\n   * Valider que le champ \"exp\" du token ne correspond pas à une date passée\n   * @param token Jeton\n   */\n  validerExp(token: any) {\n    // Construire un objet Date qui contient la date d'expiration du jeton\n    const dateExp = new Date(0);\n    dateExp.setUTCSeconds(token.exp);\n\n    if (!dateExp) {\n      return false;\n    }\n\n    // Comparer la date d'expiration à la date courante\n    return dateExp.valueOf() > new Date().valueOf();\n  }\n\n  /**\n   * Valider que le token est correctement signé\n   * @param token Jeton\n   * @param keys Cles\n   * @param alg Algorithme\n   */\n  validerSignature(token: any, keys: any, alg: string) {\n    // Récupérer le header du jeton\n    const header_jeton_encode = token.split('.')[0];\n    const header_decode = JSON.parse(atob(header_jeton_encode));\n\n    // L'algorithme doit etre R256\n    if (header_decode.alg !== alg) {\n      return false;\n    }\n\n    let resultat = false;\n\n    // Si une seule clé présente, pas de controle du kid\n    if (keys.length === 1) {\n      const key = keys[0];\n\n      const clePublique = jsrsasign.KEYUTIL.getKey(key);\n      resultat = jsrsasign.KJUR.jws.JWS.verify(token, clePublique, [alg]);\n      return resultat;\n    }\n\n    // Comparaison de chaque clé à la clé fournie dans le jeton\n    for (const key of keys) {\n      if (key.kid === header_decode.kid) {\n        const clePublique = jsrsasign.KEYUTIL.getKey(key);\n        resultat = jsrsasign.KJUR.jws.JWS.verify(token, clePublique, [alg]);\n        return resultat;\n      }\n    }\n\n    return resultat;\n  }\n\n  /**\n   * Valider que le champ \"aud\" du token n'est pas vide\n   * @param token Jeton\n   */\n  validerAudNonVide(token: any) {\n    return token.aud && token.aud.length > 0;\n  }\n\n    /**\n   * Valider que le champ \"sub\" du token est égal au sujet + '@' + le client ID requis\n   * @param token Jeton\n   * @param sujet Sujet\n   * @param client_id Identifiant\n   */\n  validerSubOcean(token: any, client_id: string) {\n    const sub = token.sub.split('@');\n    return sub.length === 2 && sub[1] === client_id;\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { PrismeAngularConfiguration } from '../prisme-angular.config';\nimport { AccessTokenService } from './access-token.service';\nimport { LoginService, SessionUtilisateur } from './login.service';\nimport { OauthValidationService } from './oauth-validation.service';\nimport { OauthService } from './oauth.service';\n\nconst ALGO_VALIDATION = 'RS512';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OauthCallbackService {\n\n  private pssPublicKeys: any;\n\n  constructor(@Inject(PrismeAngularConfiguration) private environment: PrismeAngularConfiguration,\n              private oauthService: OauthService,\n              private loginService: LoginService,\n              private oauthValidationService: OauthValidationService,\n              private http: HttpClient,\n              private accessTokenService: AccessTokenService) {\n  }\n\n  handleFragment(fragment: string, callBackSucces: () => void, callBackErreur: () => void): Promise<any> {\n\n    // Parsing du fragment (séparation des champs)\n    const champs = decodeURIComponent(fragment).split('&');\n\n    const params = [];\n    champs.forEach(function(value) {\n      // Parsing des champs du fragment\n      if (value.indexOf('=') !== -1) {\n        const champ_tokens = value.split('=');\n        params[champ_tokens[0]] = champ_tokens[1];\n      }\n    });\n\n    // Récupération Access Token\n    const access_token_str = params['access_token'];\n    const ocean_token_str = params['data'];\n\n    // Si tout s'est bien passé, on a l'un des 2 jetons\n    if (access_token_str) {\n\n      const state = params['state'];\n      let mode_authentification = '';\n\n      if (state) {\n        // si on a un state alors on est dans la cynématique implicit\n        // Voir OauthService.authentificationFrontUrl\n        mode_authentification = 'implicit';\n        // Si le fragment vient de la mire PSS alors on peut le valider\n        if (state !== this.oauthService.getLastState()) {\n          console.error('State invalide, il ne correspond pas à la requête.');\n          callBackErreur();\n          return Promise.reject(new Error('StateInvalid'));\n        }\n      } else {\n        mode_authentification = 'portail';\n      }\n\n      return this.handleAccessToken(access_token_str, mode_authentification, callBackSucces, callBackErreur);\n\n    } else if (ocean_token_str) {\n      return this.handleJetonOcean(ocean_token_str, callBackSucces, callBackErreur);\n\n    } else {\n      // Sinon il y a eu une erreur\n      console.error('Erreur pendant la récupération du jeton d\\'accès FRONT depuis le portail : jeton non trouvé');\n      callBackErreur();\n    }\n  }\n\n  handleAccessToken(access_token_front_str: string, mode_authentification: string,\n    callBackSucces: () => void, callBackErreur: () => void): Promise<any> {\n    return new Promise((resolve, reject) => {\n\n      const headers = new HttpHeaders();\n      headers.append('Content-type', 'application/json');\n      const options = { headers: headers };\n\n      let identifiantUtilisateur = '';\n\n      try {\n        identifiantUtilisateur = this.accessTokenService.getIdentifiantUtilisateur(access_token_front_str);\n      } catch (err) {\n        // Traitement en cas d'erreur decodage du jeton\n        callBackErreur();\n        reject(err);\n      }\n\n      // Validation du jeton - Récupération des clés\n      this.http.get<any>(this.environment.prismeKeysEndpoint).subscribe((keysResult) => {\n\n        this.pssPublicKeys = keysResult.keys;\n\n        // On peut maintenant échanger le jeton FRONT contre un jeton BACK\n\n        this.http.post<any>(this.environment.prismeTokenEndpoint,\n          this.oauthService.authentificationBackAssertionJwt(access_token_front_str), options).subscribe((body) => {\n\n          // Récupération du jeton\n          const access_token_back_str = body.access_token;\n\n          // Validation\n          if (!this.validateJeton(access_token_back_str, this.pssPublicKeys)) {\n            callBackErreur();\n            resolve('erreur');\n            return;\n          }\n\n          // Mise à jour de la valeur d'expiration\n          const expirationTime = this.calculateExpirationTime(body.expires_in);\n\n          const tokenData: SessionUtilisateur = {\n            accessTokenBack: access_token_back_str,\n            accessTokenFront: access_token_front_str,\n            oceanToken: null,\n            expiration: expirationTime,\n            infosUtilisateurFront: null,\n            infosUtilisateurBack: null,\n            mode: mode_authentification,\n            payload: null\n          };\n          this.loginService.storeInfos(tokenData);\n\n          // Appel du service user-infos pour avoir les infos utilisateur bak\n          this.updateInfosUtilisateur(identifiantUtilisateur, callBackSucces, callBackErreur, resolve);\n\n        }, (err) => {\n          console.error('Erreur pendant l\\'authentification : échec du JWT Assertion');\n          if (err.error) {\n            console.error('[ ' + err.error.error_code + ' ] ' + err.error.error_message);\n          }\n          callBackErreur();\n          resolve('erreur');\n        });\n      }, (err) => {\n        console.error('Erreur lors de la récupération des clés publiques PSS');\n        console.error(err);\n        callBackErreur();\n        resolve('erreur');\n      });\n    });\n  }\n\n  /**\n   * Traitement du jeton\n   * @param ocean_token_str Jeton\n   * @param callBackSucces Méthode si traitement OK\n   * @param callBackErreur Méthode si traitement KO\n   */\n  handleJetonOcean(ocean_token_str: string, callBackSucces: () => void, callBackErreur: () => void): Promise<any> {\n    return new Promise((resolve, reject) => {\n      /** On l'échange contre un jeton front */\n      const headers = new HttpHeaders();\n      headers.append('Content-type', 'application/json');\n      const options = { headers: headers };\n      this.http.post<any>(this.environment.prismeTokenEndpoint,\n        this.oauthService.authentificationFrontAssertionOcean(ocean_token_str), options).subscribe((bodyFront) => {\n\n        // Récupération du jeton\n        const access_token_front_str = bodyFront.access_token;\n        const access_token_front_decode = this.accessTokenService.decodeAccessToken(access_token_front_str);\n\n        // Validation du jeton - Récupération des clés\n        this.http.get<any>(this.environment.prismeKeysEndpoint).subscribe((keysResult) => {\n\n          this.pssPublicKeys = keysResult.keys;\n\n          // Validation du jeton\n          if (!this.validateJeton(access_token_front_str, this.pssPublicKeys)) {\n            callBackErreur();\n            resolve('erreur');\n            return;\n          }\n\n          if (!this.oauthValidationService.validerSubOcean(access_token_front_decode, this.environment.prismeClientId)) {\n            console.error('Contrôle du jeton d\\'accès FRONT : SUB non valide');\n            callBackErreur();\n            resolve('erreur');\n            return;\n          }\n\n          // On peut maintenant échanger le jeton FRONT contre un jeton BACK\n          this.http.post<any>(this.environment.prismeTokenEndpoint,\n            this.oauthService.authentificationBackAssertionJwt(access_token_front_str), options).subscribe((bodyBack) => {\n\n            // Récupération du jeton\n            const access_token_back_str = bodyBack.access_token;\n\n            // Validation du jeton\n            if (!this.validateJeton(access_token_back_str, this.pssPublicKeys)) {\n              callBackErreur();\n              resolve('erreur');\n              return;\n            }\n\n            // Mise à jour de la valeur d'expiration\n            const expirationTime = this.calculateExpirationTime(bodyBack.expires_in);\n\n            // Login\n            const tokenData: SessionUtilisateur = {\n              accessTokenBack: access_token_back_str,\n              accessTokenFront: access_token_front_str,\n              oceanToken: ocean_token_str,\n              expiration: expirationTime,\n              infosUtilisateurFront: null,\n              infosUtilisateurBack: null,\n              mode: 'ocean',\n              payload : null\n            };\n\n            this.loginService.storeInfos(tokenData);\n\n            // Appel du service user-infos pour avoir les infos utilisateur\n            const identifiantUtilisateur = this.accessTokenService.getIdentifiantUtilisateur(access_token_front_str);\n            this.updateInfosUtilisateur(identifiantUtilisateur, callBackSucces, callBackErreur, resolve);\n\n          }, (err) => {\n            console.error('Erreur pendant l\\'authentification : échec du JWT Assertion');\n            if (err.error_message) {\n              console.error('[ ' + err.error_code + ' ] ' + err.error_message);\n            }\n            callBackErreur();\n            resolve('erreur');\n          });\n        }, (err) => {\n          console.error('Erreur lors de la récupération des clés publiques PSS');\n          console.error(err);\n          callBackErreur();\n          resolve('erreur');\n        });\n      }, (err) => {\n        console.error('Erreur HTTP');\n        console.error(err);\n        callBackErreur();\n        resolve('erreur');\n      });\n    });\n  }\n\n  /**\n   * Méthode de renovellement d'un jeton\n   * @param access_token_front_str le jeton à renouveller\n   */\n  public renewAccessTokenPortail(access_token_front_str: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if (this.pssPublicKeys) {\n        this.renewAccessToken(access_token_front_str, this.pssPublicKeys, resolve, reject);\n      } else {\n        // Récupération des clés pour valider le jeton\n        this.http.get<any>(this.environment.prismeKeysEndpoint).subscribe((keysResult) => {\n\n          this.pssPublicKeys = keysResult.keys;\n          this.renewAccessToken(access_token_front_str, this.pssPublicKeys, resolve, reject);\n\n        }, (err) => {\n          console.error('Erreur lors de la récupération des clés publiques PSS');\n          console.error(err);\n\n          // Rejet de la promise pour stopper le rafraichissement car on a une erreur\n          reject(err);\n        });\n      }\n    });\n  }\n\n  /**\n   * Méthode de renovellement d'un jeton\n   * @param access_token_front_str  le jeton à renouveller\n   * @param publicKeys les clés pour valider le jeton\n   * @param resolve méthode pour indiquer que le renouvellement est terminé\n   * @param reject méthode pour indiquer qu'une erreur est survenue lors du renouvellement\n   */\n  private renewAccessToken(access_token_front_str: string, publicKeys: any, resolve: any, reject: any) {\n    // On peut maintenant échanger le jeton FRONT contre un jeton BACK\n    const headers = new HttpHeaders();\n    headers.append('Content-type', 'application/json');\n    const options = { headers: headers };\n\n    this.http.post<any>(this.environment.prismeTokenEndpoint,\n      this.oauthService.authentificationBackAssertionJwt(access_token_front_str), options).subscribe((body) => {\n\n      // Récupération du jeton\n      const access_token_back_str = body.access_token;\n\n      // Validation\n      if (!this.validateJeton(access_token_back_str, publicKeys)) {\n        reject('jeton invalide');\n      }\n\n      // Mise à jour de la valeur d'expiration\n      const expirationTime = this.calculateExpirationTime(body.expires_in);\n      this.loginService.updateAccessToken(access_token_back_str, expirationTime);\n\n      // Resolve de la promise pour indiquer que le refresh est ok\n      resolve(true);\n    }, (err) => {\n      console.error('Erreur pendant l\\'authentification : échec du JWT Assertion');\n      if (err.error) {\n        console.error('[ ' + err.error.error_code + ' ] ' + err.error.error_message);\n      }\n\n      // Rejet de la promise pour stopper le rafraichissement car on a une erreur\n      reject(err);\n    });\n  }\n\n  /**\n   * Validation du jeton : voir la documentation JWT Assertion\n   * @param access_token_back_str le jeton\n   * @param access_token_back_decode le jeton décodé\n   * @param publicKeys les clés\n   */\n  private validateJeton(access_token_back_str: string, publicKeys: string): boolean {\n\n    const access_token_back_decode = this.accessTokenService.decodeAccessToken(access_token_back_str);\n\n    // Validation du jeton : voir la documentation JWT Assertion\n    if (!this.oauthValidationService.validerIss(access_token_back_decode)) {\n      console.error('Contrôle du jeton d\\'accès : ISS non valide');\n      return false;\n    }\n\n    if (!this.oauthValidationService.validerExp(access_token_back_decode)) {\n      console.error('Contrôle du jeton d\\'accès : EXP non valide');\n      return false;\n    }\n\n    if (!this.oauthValidationService.validerAudNonVide(access_token_back_decode)) {\n      console.error('Contrôle du jeton d\\'accès : AUD non valide');\n      return false;\n    }\n\n    if (!this.oauthValidationService.validerSignature(access_token_back_str, publicKeys, ALGO_VALIDATION)) {\n      console.error('Contrôle du jeton d\\'accès : Signature non valide');\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * calcule la date d'expiration du jeton\n   * @param expiresInNum la durée de validité du jeton\n   */\n  private calculateExpirationTime(expiresInNum: any): Date {\n    const expirationDate = new Date();\n    expirationDate.setSeconds(expirationDate.getSeconds() + expiresInNum);\n    return expirationDate;\n  }\n\n  /**\n   * Met à jour les données utilisateur en utilisateur le service user-infos\n   * @param identifiantUtilisateur le user\n   * @param callBackSucces le callback si tout est ok\n   * @param callBackErreur le callback d'erreur\n   * @param resolve provient de la promise retournée par ce service OauthCallbackService\n   */\n  private updateInfosUtilisateur(identifiantUtilisateur: string, callBackSucces: () => void, callBackErreur: () => void, resolve: any) {\n    if (this.environment.chargerUserInfosBack) {\n      this.getUserInfoObservable(identifiantUtilisateur, this.loginService.getAccessTokenBack()).subscribe(\n        bodyUser => {\n\n          this.loginService.updateInfosUtilisateurBack(bodyUser);\n\n          if (this.environment.chargerUserInfosFront) {\n            this.updateInfosUtilisateurFront(identifiantUtilisateur, callBackSucces, callBackErreur, resolve);\n          } else {\n            callBackSucces();\n            resolve('sucess');\n          }\n\n        }, err => this.handlerUserInfoError(err, callBackErreur, resolve)\n      );\n    } else if (this.environment.chargerUserInfosFront) {\n      this.updateInfosUtilisateurFront(identifiantUtilisateur, callBackSucces, callBackErreur, resolve);\n    } else {\n      callBackSucces();\n      resolve('sucess');\n    }\n  }\n\n  /**\n   * Permet de réaliser un appel à user-info avec uun access token front et de mettre à jour les informations utilisateur\n   * @param identifiantUtilisateur le user\n   * @param callBackSucces le callback si tout est ok\n   * @param callBackErreur le callback d'erreur\n   * @param resolve provient de la promise retournée par ce service OauthCallbackService\n   */\n  private updateInfosUtilisateurFront(identifiantUtilisateur: string,\n    callBackSucces: () => void, callBackErreur: () => void, resolve: any) {\n    this.getUserInfoObservable(identifiantUtilisateur, this.loginService.getAccessTokenFront()).subscribe(result => {\n      this.loginService.updateInfosUtilisateurFront(result);\n      callBackSucces();\n      resolve('sucess');\n    },\n    err => this.handlerUserInfoError(err, callBackErreur, resolve));\n  }\n\n  /**\n   * Permet de réaliser l'appel au service user-ifnos\n   * @param identifiantUtilisateur le user\n   * @param token le token d'authentification\n   */\n  private getUserInfoObservable(identifiantUtilisateur: string, token: string): Observable<any> {\n    const requestHeaders = {\n      headers: new HttpHeaders({\n        'Content-type' : 'application/json',\n        'Authorization' : 'Bearer ' + token\n      })\n    };\n\n    return this.http.post<any>(this.environment.prismeUserEndpoint,\n      {'username': identifiantUtilisateur}, requestHeaders);\n  }\n\n  /**\n   * Permet de gérer les messages d'erreurs du service user-infos\n   * @param err le message de retour du service\n   * @param callBackErreur le callback d'erreur\n   * @param resolve provient de la promise retournée par ce service OauthCallbackService\n   */\n  private handlerUserInfoError(err: any, callBackErreur: () => void, resolve: any) {\n    console.error('Erreur pendant l\\'authentification : échec du user-info');\n    if (err.error) {\n      console.error('[ ' + err.error.error_code + ' ] ' + err.error.error_message);\n    }\n    callBackErreur();\n    resolve('erreur');\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Subject, Subscription, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { LoginService } from './login.service';\nimport { OauthCallbackService } from './oauth-callback.service';\nimport { PrismeAngularInitConfig } from '../prisme-angular-init.config';\nimport { PrismeAngularConfiguration } from '../prisme-angular.config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RefreshService {\n\n  private timerSubscription: Subscription;\n  private timerSubject = new Subject();\n\n  constructor(@Inject(PrismeAngularConfiguration) private environment: PrismeAngularConfiguration,\n              private oauthCallbackService: OauthCallbackService,\n              private loginService: LoginService,\n              private prismeAngularInitConfig: PrismeAngularInitConfig) {\n  }\n\n  public initierRafraichissement() {\n    // on s'assure que le rafraichissement ne se lance pas plusieurs fois\n    this.stopperRafraichissement();\n    sessionStorage.setItem(this.prismeAngularInitConfig.cleStockageEtatRafraichissement, 'O');\n    this.lancerTimerRafraichissement();\n  }\n\n  /**\n   * Permet de relancer rafraichissement\n   * Ex : lors d'un F5 sur la page le timer est détruit\n   */\n  public relancerRafraichissement() {\n    const etatRafraichissement = sessionStorage.getItem(this.prismeAngularInitConfig.cleStockageEtatRafraichissement);\n    if (etatRafraichissement === 'O' && !this.timerSubscription) {\n      this.lancerTimerRafraichissement();\n    }\n  }\n\n  /**\n   * Création du timer qui va rafraichir le jeton au bout d'un temps donné\n   */\n  private lancerTimerRafraichissement() {\n    this.timerSubscription = timer(this.environment.prismeRefreshTokensInterval, this.environment.prismeRefreshTokensInterval)\n      .pipe(takeUntil(this.timerSubject))\n      .subscribe(() => {\n        this.rafraichir();\n      });\n  }\n\n  /**\n   * Rafraichissement effectif du jeton selon le mode de connexion.\n   * En cas d'erreur on arrête le service\n   */\n  private rafraichir() {\n    if (sessionStorage.getItem(this.prismeAngularInitConfig.cleStockageEtatRafraichissement) === 'O') {\n      const accessToken = this.loginService.getAccessTokenBack();\n      if (accessToken !== null) {\n        this.oauthCallbackService.renewAccessTokenPortail(accessToken).catch(error => {\n          console.error('error refresh jeton : ' + JSON.stringify(error));\n          this.stopperRafraichissement();\n        });\n      }\n    }\n  }\n\n  /**\n   * Permet de stopper le rafraichissement du jeton\n   * @returns Promise<any> renvoi resolve(true) lorsque le service est arreté\n   */\n  public stopperRafraichissement(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      sessionStorage.setItem(this.prismeAngularInitConfig.cleStockageEtatRafraichissement, 'N');\n      // arrêt du timer\n      this.timerSubject.next();\n      if (this.timerSubscription) {\n        this.timerSubscription.unsubscribe();\n      }\n      resolve(true);\n    });\n  }\n\n  /**\n   * Permet de stopper le rafraichissement du jeton et de se deconnecter\n   * Cette méthode contient les appels à\n   *  RefreshService.stopperRafraichissement() et LoginService.deconnecter()\n   * @returns Promise<any> renvoi resolve(true) lorsque les opérations sont terminées\n   */\n  public stopperRafraichissementEtDeconnecter(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.stopperRafraichissement().then(() => {\n        this.loginService.deconnecter().then(() => {\n          resolve(true);\n        });\n      });\n    });\n  }\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\nimport { FailureLoginHandlerInterface } from './handler/failure-login-handler-interface';\nimport { SuccessLoginHandlerInterface } from './handler/success-login-handler-interface';\nimport { PrismeAngularConfiguration, PRISME_FAILURE_LOGIN_HANDLER, PRISME_SUCCESS_LOGIN_HANDLER } from './prisme-angular.config';\nimport { LoginService } from './service/login.service';\nimport { OauthCallbackService } from './service/oauth-callback.service';\nimport { OauthService } from './service/oauth.service';\nimport { RefreshService } from './service/refresh.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthImplicitGuard implements CanActivate {\n  static ReadyWebMessage = class {\n        public topic: string;\n        public data: string;\n\n        constructor(aTopic: string, aData: any) {\n          this.topic = aTopic;\n          this.data = aData;\n        }\n  };\n\n  failureLH: FailureLoginHandlerInterface;\n  successLH: SuccessLoginHandlerInterface;\n\n  constructor(\n    @Inject(PRISME_SUCCESS_LOGIN_HANDLER) successLH: SuccessLoginHandlerInterface,\n    @Inject(PRISME_FAILURE_LOGIN_HANDLER) failureLH: FailureLoginHandlerInterface,\n    @Inject(PrismeAngularConfiguration) private environment: PrismeAngularConfiguration,\n    private oauthService: OauthService,\n    private loginService: LoginService,\n    private oauthCallBackService: OauthCallbackService,\n    private refreshService: RefreshService,\n    private _ngZone: NgZone\n  ) {\n    this.successLH = successLH;\n    this.failureLH = failureLH;\n  }\n\n  // Methode \"GUARD\" devant être résolue pour avant l'accès à une page protégée\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)  {\n\n    // En cas d'erreur, il y a des queryParams (notamment \"?error=...\")\n    if (route.queryParams && route.queryParams['error']) {\n      const error = route.queryParams['error'];\n      switch (error) {\n        case 'reset_password_required': {\n          // Cela signifie que l'utilisateur a cliqué sur le lien \"mot de passe oublié\"\n          alert('Le mot de passe de cette application est votre mot de passe Anais');\n          break;\n        }\n        default: {\n          // Cela signifie qu'il y a eu une erreur\n          this.failureLH.failureLogin(this.loginService);\n          return false;\n        }\n      }\n    }\n\n    if (this.loginService.isConnecte()) {\n      this.refreshService.relancerRafraichissement();\n      return true;\n    }\n\n    // Authentification directe via WebMessage\n    // (un fragment spécifique présent dans l'url permet d'activer ce mode d'ouverture)\n    if (this.oauthService.isDelegatedOpeningWithWebMessage(route.fragment)) {\n      const result = this.connexionViaWebMessageHTML5();\n      this.sendReadyWebMessageHTML5();\n      return result;\n    }\n\n\n    // Authentification avec un fragment présent dans l'url\n    if (route.fragment) {\n      return this.connexionViaURLFragment(route.fragment);\n    }\n\n    // Redirection vers la mire d'authentification\n    window.location.href = this.oauthService.authentificationFrontUrl(state.url);\n    return false;\n  }\n\n  // Mode de connexion Cross-Domain via passage de Jeton avec usage du WebMessaging HTML5\n  private connexionViaWebMessageHTML5() {\n    const myOauthCallBackService = this.oauthCallBackService;\n    const mySuccessLH = this.successLH;\n    const myFailureLH = this.failureLH;\n    const myRefreshService = this.refreshService;\n    const myLoginService = this.loginService;\n    const myEnvironment = this.environment;\n    return new Promise<boolean>(function(resolve, reject) {\n      // Ajout d'un listener en attente des evenements de type 'message'\n      window.addEventListener('message',\n        (e) => {\n          if (e.data.topic === myEnvironment.jetonMessageTopic ) {\n            const tokenValue = e.data.token_value;\n            // A la reception d'un message de type token, lancement des traitements de login\n            if (e.data.token_type === 'jwt') {\n              myOauthCallBackService.handleAccessToken(\n                tokenValue,\n                'portail',\n                () => mySuccessLH.successLogin(myRefreshService),\n                () => myFailureLH.failureLogin(myLoginService))\n                .then(() => {\n                  myRefreshService.initierRafraichissement();\n                  resolve(true);\n                });\n            } else if (e.data.token_type === 'ocean') {\n              myOauthCallBackService.handleJetonOcean(\n                tokenValue,\n                () => mySuccessLH.successLogin(myRefreshService),\n                () => myFailureLH.failureLogin(myLoginService))\n                .then(() => {\n                  myRefreshService.initierRafraichissement();\n                  resolve(true);\n                });\n            }\n          }\n        });\n    });\n  }\n\n  // Mode de connexion Cross-Domain via passage de Jeton avec usage URLFragment\n  // Usage limité à des jetons <2ko pour IE\n  private connexionViaURLFragment(routeFragment: string) {\n    return new Promise<boolean>((resolve) => {\n      this.oauthCallBackService\n        .handleFragment(routeFragment,\n            () => this.successLH.successLogin(this.refreshService),\n            () => this.failureLH.failureLogin(this.loginService))\n        .then(() => {\n          this.refreshService.initierRafraichissement();\n          resolve(true);\n      }).catch( function() { }); // prevents \"Uncaught (in promise) error\n    });\n  }\n\n  private sendReadyWebMessageHTML5() {\n    const message = new AuthImplicitGuard.ReadyWebMessage(this.environment.jetonReadyTopic, null);\n    window.parent.postMessage(message, '*');\n  }\n\n}\n\n","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {LoginService} from '../service/login.service';\n\n\n/**\n * Intercepteur qui ajoute à toutes les requêtes le jeton dans l'entête Bearer\n * Ne fait rien si l'utilisateur n'est pas connecté\n */\n@Injectable()\nexport class PrismeBearerInterceptor implements HttpInterceptor {\n  constructor(protected loginService: LoginService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Si l'utilisateur est connecté et que l'on a pas déjà un jeton ajouté au moment de la création de la requête\n    if (this.loginService.isConnecte() && !this.hasBearerToken(req)) {\n      // Ajout de l'access token\n      return next.handle(this.ajoutJeton(req));\n    }\n\n    // Sinon, rien à faire\n    return next.handle(req);\n  }\n\n  // Ajoute le jeton dans l'entête Bearer\n  ajoutJeton(req: HttpRequest<any>) {\n    const headers = {\n      Authorization: 'Bearer ' + this.loginService.getAccessTokenBack()\n    };\n\n    return req.clone({setHeaders: headers} );\n  }\n\n  /**\n   * Vérifie si on a déjà le jeton d'authentification dans les entêtes de la requête\n   * @param req la requête http\n   */\n  private hasBearerToken(req: HttpRequest<any>): boolean {\n    if (req.headers.has('Authorization')) {\n      const headers: string[] = req.headers.getAll('Authorization');\n      if (headers.find(value => value.startsWith('Bearer ') === true)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { StorageServiceModule } from 'ngx-webstorage-service';\nimport { PrismeBearerInterceptor } from './interceptor/prisme-bearer-interceptor';\nimport {CLE_STOCKAGE, PrismeAngularInitConfig, UTILISER_LOCAL_STORAGE_TOKEN} from './prisme-angular-init.config';\n\n\n\n/**\n * Function permettant d'initiliser la configuration de prismeAngularInitModule\n *\n * @export\n * @param  cleStockage : clé de stockage utilisé dans le sessionStorage\n * @returns la classe PrismeAngularInitConfig instanciée\n */\n\n/**\n * Module permettant d'initialiser la partie minimale de prisme.\n * Il permet entre d'initialiser les modules nécessaires au bearerInterceptor\n * Il prend en paramètre optionnel la clé de stockage\n * @export\n */\n@NgModule({\n  imports : [CommonModule,\n    HttpClientModule,\n    StorageServiceModule,\n    RouterModule.forRoot([], { relativeLinkResolution: 'legacy' })],\n\n  providers : [\n    {provide: HTTP_INTERCEPTORS, useClass: PrismeBearerInterceptor, multi: true },\n]\n })\nexport class PrismeAngularInitModule {\n   static forRoot(cleStockage: string, utiliserLocalStorage: boolean): ModuleWithProviders<PrismeAngularInitModule> {\n    return {\n      ngModule: PrismeAngularInitModule,\n      providers: [PrismeAngularInitConfig, {provide : CLE_STOCKAGE, useValue: cleStockage},\n        {provide : UTILISER_LOCAL_STORAGE_TOKEN, useValue: utiliserLocalStorage}]\n    };\n  }\n}\n","\nimport { AbstractFailureLoginHandler } from './abstract-failure-login.handler';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DefaultFailureLoginHandler extends AbstractFailureLoginHandler {\n\n  postFailureLogin() {\n    console.log('Dans default failure Login Handler');\n    alert('Une erreur est survenue lors de l\\'authentification');\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { PrismeAngularInitConfig } from '../prisme-angular-init.config';\nimport { PrismeAngularConfiguration } from '../prisme-angular.config';\nimport { AbstractSuccessLoginHandler } from './abstract-success-login.handler';\n\n@Injectable()\nexport class DefaultSuccessLoginHandler extends AbstractSuccessLoginHandler {\n\n\n    constructor( @Inject(PrismeAngularConfiguration) protected environment: PrismeAngularConfiguration,\n    protected initConfig: PrismeAngularInitConfig) {\n      // Appel du constrcuteur du parent\n      super();\n\n      // Test des paramètres obligatoires\n      if (!this.initConfig.cleStockagePageFrom) {\n        throwError('Paramètre manquant : cleStockagePageFrom. Est t-il bien présent dans le fichier environnement.ts ?');\n      }\n      if (!this.environment.pageApresConnexion) {\n        throwError('Paramètre manquant : pageApresConnexion. Est t-il bien présent dans le fichier environnement.ts ?');\n      }\n\n    }\n\n    postSuccessLogin() {\n      // Méthode à surcharger permettant d'ajouter un comportement après l'authentification\n      console.log('Dans DefaultSuccessLoginHandler');\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { DefaultFailureLoginHandler } from './handler/default-failure-login.handler';\nimport { DefaultSuccessLoginHandler } from './handler/default-success-login.handler';\nimport {PRISME_SUCCESS_LOGIN_HANDLER, PRISME_FAILURE_LOGIN_HANDLER, PrismeAngularConfiguration } from './prisme-angular.config';\nimport { CallbackComponent } from './component/callback/callback.component';\n\n\n/**\n * Ce module permet de charger la configuration de prisme.Il va de paire avec le module\n * PrismeAngularInitConfiguration\n *\n * @export\n */\n@NgModule({\n  imports : [CommonModule,\n  RouterModule.forRoot([], { relativeLinkResolution: 'legacy' })],\n  declarations: [CallbackComponent],\n  exports: [CallbackComponent],\n  providers : [\n  // L'application appelante doit fournir un prismeAngularConfiguration\n  {provide : PrismeAngularConfiguration, useExisting : 'PrismeAngularConfiguration'},\n\n  // Si l'application appelante ne surcharge par le success andler, alors on utilise celui par défaut.\n  { provide: PRISME_SUCCESS_LOGIN_HANDLER, useClass: DefaultSuccessLoginHandler},\n\n  // Si l'application appelante ne surcharge par le failure handler, alors on utilise celui par défaut.\n  { provide: PRISME_FAILURE_LOGIN_HANDLER, useClass : DefaultFailureLoginHandler},\n]\n })\nexport class PrismeAngularModule {\n\n}\n","import { LoginService } from './lib/service/login.service';\n\n/*\n * Public API Surface of prisme-angular\n */\nexport * from './lib/handler/abstract-success-login.handler';\nexport * from './lib/handler/abstract-failure-login.handler';\nexport * from './lib/component/callback/callback.component';\nexport * from './lib/auth-implicit.guard';\nexport * from './lib/prisme-angular-init.module';\nexport * from './lib/prisme-angular.module';\nexport * from './lib/service/login.service';\nexport * from './lib/service/oauth.service';\nexport * from './lib/service/refresh.service';\nexport * from './lib/prisme-angular.config';\nexport * from './lib/model/infos-utilisateur';\n\n\n\n\n\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1.PrismeAngularConfiguration","i2.PrismeAngularInitConfig","i1.PrismeAngularInitConfig","i2","i1.AccessTokenService","i1.OauthService","i2.LoginService","i3.OauthValidationService","i5.AccessTokenService","i1.OauthCallbackService","i3.PrismeAngularInitConfig","i3.OauthCallbackService","i4.RefreshService","i1.LoginService","i1"],"mappings":"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"}