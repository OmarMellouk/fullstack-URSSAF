import { NgZone } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';
import { FailureLoginHandlerInterface } from './handler/failure-login-handler-interface';
import { SuccessLoginHandlerInterface } from './handler/success-login-handler-interface';
import { PrismeAngularConfiguration } from './prisme-angular.config';
import { LoginService } from './service/login.service';
import { OauthCallbackService } from './service/oauth-callback.service';
import { OauthService } from './service/oauth.service';
import { RefreshService } from './service/refresh.service';
import * as i0 from "@angular/core";
export declare class AuthImplicitGuard implements CanActivate {
    private environment;
    private oauthService;
    private loginService;
    private oauthCallBackService;
    private refreshService;
    private _ngZone;
    static ReadyWebMessage: {
        new (aTopic: string, aData: any): {
            topic: string;
            data: string;
        };
    };
    failureLH: FailureLoginHandlerInterface;
    successLH: SuccessLoginHandlerInterface;
    constructor(successLH: SuccessLoginHandlerInterface, failureLH: FailureLoginHandlerInterface, environment: PrismeAngularConfiguration, oauthService: OauthService, loginService: LoginService, oauthCallBackService: OauthCallbackService, refreshService: RefreshService, _ngZone: NgZone);
    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean>;
    private connexionViaWebMessageHTML5;
    private connexionViaURLFragment;
    private sendReadyWebMessageHTML5;
    static ɵfac: i0.ɵɵFactoryDeclaration<AuthImplicitGuard, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AuthImplicitGuard>;
}
