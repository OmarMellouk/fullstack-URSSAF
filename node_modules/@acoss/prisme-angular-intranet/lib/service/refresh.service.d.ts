import { LoginService } from './login.service';
import { OauthCallbackService } from './oauth-callback.service';
import { PrismeAngularInitConfig } from '../prisme-angular-init.config';
import { PrismeAngularConfiguration } from '../prisme-angular.config';
import * as i0 from "@angular/core";
export declare class RefreshService {
    private environment;
    private oauthCallbackService;
    private loginService;
    private prismeAngularInitConfig;
    private timerSubscription;
    private timerSubject;
    constructor(environment: PrismeAngularConfiguration, oauthCallbackService: OauthCallbackService, loginService: LoginService, prismeAngularInitConfig: PrismeAngularInitConfig);
    initierRafraichissement(): void;
    /**
     * Permet de relancer rafraichissement
     * Ex : lors d'un F5 sur la page le timer est détruit
     */
    relancerRafraichissement(): void;
    /**
     * Création du timer qui va rafraichir le jeton au bout d'un temps donné
     */
    private lancerTimerRafraichissement;
    /**
     * Rafraichissement effectif du jeton selon le mode de connexion.
     * En cas d'erreur on arrête le service
     */
    private rafraichir;
    /**
     * Permet de stopper le rafraichissement du jeton
     * @returns Promise<any> renvoi resolve(true) lorsque le service est arreté
     */
    stopperRafraichissement(): Promise<any>;
    /**
     * Permet de stopper le rafraichissement du jeton et de se deconnecter
     * Cette méthode contient les appels à
     *  RefreshService.stopperRafraichissement() et LoginService.deconnecter()
     * @returns Promise<any> renvoi resolve(true) lorsque les opérations sont terminées
     */
    stopperRafraichissementEtDeconnecter(): Promise<any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<RefreshService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RefreshService>;
}
