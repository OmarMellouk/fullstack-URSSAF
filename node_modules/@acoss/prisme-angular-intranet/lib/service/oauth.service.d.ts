import { Router } from '@angular/router';
import { PrismeAngularConfiguration } from '../prisme-angular.config';
import { PrismeAngularInitConfig } from '../prisme-angular-init.config';
import * as i0 from "@angular/core";
export declare class OauthService {
    private environment;
    protected prismeAngularInitConfig: PrismeAngularInitConfig;
    private router;
    static readonly NONCE_LENGTH = 50;
    static readonly STATE_LENGTH = 50;
    /** Chaines spécifiques à OIDC */
    private readonly response_type;
    private readonly grant_type_jwt;
    private readonly assertion_type_jwt;
    private readonly grant_type_ocean;
    private readonly assertion_type_ocean;
    constructor(environment: PrismeAngularConfiguration, prismeAngularInitConfig: PrismeAngularInitConfig, router: Router);
    private savePageFrom;
    /**
     * Renvoie l'URL vers la mire de login pour authentification
     */
    authentificationFrontUrl(url: string): string;
    /**
     * Renvoie un body de requête en mode assertion JWT
     * @param assertion Jeton
     */
    authentificationBackAssertionJwt(assertion: string): any;
    /**
   * Renvoie un body de requête en mode assertion JWT
   * @param assertion Jeton
   */
    authentificationFrontAssertionOcean(assertion: string): any;
    /**
     * Récupère la dernière valeur du Nonce.
     */
    getLastNonce(): string;
    /**
     * Récupère la dernière valeur du state.
     */
    getLastState(): string;
    /**
     * Génère une chaine aléatoire pour le nonce/state
     * @param length Longueur
     */
    private randomString;
    /**
     * Vérifie s'il s'agit d'une ouverture en mode connexion WebMessaging
     * @param fragmentValue Valeur d'URL Fragment
     */
    isDelegatedOpeningWithWebMessage(fragmentValue: string): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<OauthService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<OauthService>;
}
