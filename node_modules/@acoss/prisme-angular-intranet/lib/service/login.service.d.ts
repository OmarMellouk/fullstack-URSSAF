import { PrismeAngularInitConfig } from '../prisme-angular-init.config';
import { InfosUtilisateur } from '../model/infos-utilisateur';
import { AccessTokenService } from './access-token.service';
import * as i0 from "@angular/core";
export interface SessionUtilisateur {
    accessTokenBack: string;
    accessTokenFront: string;
    oceanToken: string;
    expiration: Date;
    mode: string;
    infosUtilisateurBack: any;
    infosUtilisateurFront: any;
    payload: any;
}
export declare class LoginService {
    private config;
    private accessTokenService;
    constructor(config: PrismeAngularInitConfig, accessTokenService: AccessTokenService);
    /**
     * Indique si l'utilisateur est connecté.
     */
    isConnecte(): boolean;
    /**
     * Renvoie toutes les informations
     */
    private getInfos;
    /**
     * Renvoie les infos de l'utilisateur
     */
    getInfosUtilisateurBack(): InfosUtilisateur;
    getInfosUtilisateurFront(): InfosUtilisateur;
    /**
     * Renvoie le payload
     */
    getPayload(): any;
    /**
     * Renvoie les droits de l'utilisateur pour le frontend
     */
    getDroitsUtilisateur(): any;
    /**
     * Renvoie les droits de l'utilisateur pour le backend
     */
    getDroitsUtilisateurBack(): any;
    getAccessTokenBack(): string;
    getAccessTokenFront(): string;
    getOceanToken(): string;
    getMode(): string;
    /**
     * Enregistre les infos utilisateur
     * @param infos Jeton
     */
    storeInfos(infos: SessionUtilisateur): void;
    /**
     * Pour le mode portail, permet de mettre à jour l'access token dans les infos utilisateur.
     * @param accessToken Jeton
     * @param expiration Date
     */
    updateAccessToken(accessToken: string, expiration: Date): void;
    /**
     * Permet de mettre à jour les infos utilisateur.
     * @param infosUtilisateur les infos utilisateur à mettre à jour
     */
    updateInfosUtilisateurBack(infosUtilisateur: any): void;
    /**
     * Permet de mettre à jour les infos utilisateur.
     * @param infosUtilisateur les infos utilisateur à mettre à jour
     */
    updateInfosUtilisateurFront(infosUtilisateur: any): void;
    getIdentifiantUtilisateur(): string;
    /**
   * Permet de mettre à jour le payload
   * @param payload a mettre à jour
   */
    updatePayload(payload: any): void;
    /**
     * Controle si les données utilisateur contiennent bien les droits demandés
     * @param droits Liste des droits
     */
    estAutorise(droits: string[]): boolean;
    /**
     * Controle si les données utilisateur contiennent bien les droits demandés pour le backend
     * @param droits Liste des droits
     */
    estAutoriseBack(droits: string[]): boolean;
    private checkAutorisation;
    /**
     * Controle si les données utilisateur contiennent bien le droit spécifique demandé
     * On considère que les droits sont de la forme <perimetre>:<application>:<profil>
     * @param droit Droit
     * @param droitsJeton la liste des droits contenu dans le jeton
     */
    private controleAutorisation;
    /**
     * Déconnecter
     * @returns Promise<any> renvoi resolve(true) lorsque la déconnexion est terminée
     */
    deconnecter(): Promise<any>;
    private getStorage;
    static ɵfac: i0.ɵɵFactoryDeclaration<LoginService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LoginService>;
}
