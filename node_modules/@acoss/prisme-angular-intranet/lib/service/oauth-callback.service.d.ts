import { HttpClient } from '@angular/common/http';
import { PrismeAngularConfiguration } from '../prisme-angular.config';
import { AccessTokenService } from './access-token.service';
import { LoginService } from './login.service';
import { OauthValidationService } from './oauth-validation.service';
import { OauthService } from './oauth.service';
import * as i0 from "@angular/core";
export declare class OauthCallbackService {
    private environment;
    private oauthService;
    private loginService;
    private oauthValidationService;
    private http;
    private accessTokenService;
    private pssPublicKeys;
    constructor(environment: PrismeAngularConfiguration, oauthService: OauthService, loginService: LoginService, oauthValidationService: OauthValidationService, http: HttpClient, accessTokenService: AccessTokenService);
    handleFragment(fragment: string, callBackSucces: () => void, callBackErreur: () => void): Promise<any>;
    handleAccessToken(access_token_front_str: string, mode_authentification: string, callBackSucces: () => void, callBackErreur: () => void): Promise<any>;
    /**
     * Traitement du jeton
     * @param ocean_token_str Jeton
     * @param callBackSucces Méthode si traitement OK
     * @param callBackErreur Méthode si traitement KO
     */
    handleJetonOcean(ocean_token_str: string, callBackSucces: () => void, callBackErreur: () => void): Promise<any>;
    /**
     * Méthode de renovellement d'un jeton
     * @param access_token_front_str le jeton à renouveller
     */
    renewAccessTokenPortail(access_token_front_str: string): Promise<any>;
    /**
     * Méthode de renovellement d'un jeton
     * @param access_token_front_str  le jeton à renouveller
     * @param publicKeys les clés pour valider le jeton
     * @param resolve méthode pour indiquer que le renouvellement est terminé
     * @param reject méthode pour indiquer qu'une erreur est survenue lors du renouvellement
     */
    private renewAccessToken;
    /**
     * Validation du jeton : voir la documentation JWT Assertion
     * @param access_token_back_str le jeton
     * @param access_token_back_decode le jeton décodé
     * @param publicKeys les clés
     */
    private validateJeton;
    /**
     * calcule la date d'expiration du jeton
     * @param expiresInNum la durée de validité du jeton
     */
    private calculateExpirationTime;
    /**
     * Met à jour les données utilisateur en utilisateur le service user-infos
     * @param identifiantUtilisateur le user
     * @param callBackSucces le callback si tout est ok
     * @param callBackErreur le callback d'erreur
     * @param resolve provient de la promise retournée par ce service OauthCallbackService
     */
    private updateInfosUtilisateur;
    /**
     * Permet de réaliser un appel à user-info avec uun access token front et de mettre à jour les informations utilisateur
     * @param identifiantUtilisateur le user
     * @param callBackSucces le callback si tout est ok
     * @param callBackErreur le callback d'erreur
     * @param resolve provient de la promise retournée par ce service OauthCallbackService
     */
    private updateInfosUtilisateurFront;
    /**
     * Permet de réaliser l'appel au service user-ifnos
     * @param identifiantUtilisateur le user
     * @param token le token d'authentification
     */
    private getUserInfoObservable;
    /**
     * Permet de gérer les messages d'erreurs du service user-infos
     * @param err le message de retour du service
     * @param callBackErreur le callback d'erreur
     * @param resolve provient de la promise retournée par ce service OauthCallbackService
     */
    private handlerUserInfoError;
    static ɵfac: i0.ɵɵFactoryDeclaration<OauthCallbackService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<OauthCallbackService>;
}
