import * as i0 from '@angular/core';
import { Injectable, Component, Input, NgModule } from '@angular/core';
import * as i1 from '@angular/router';
import { NavigationEnd, PRIMARY_OUTLET, RouterModule } from '@angular/router';
import { filter } from 'rxjs/operators';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

class BreadcrumbService {
    constructor() { }
}
BreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: BreadcrumbService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
BreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: BreadcrumbService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: BreadcrumbService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class BreadcrumbComponent {
    constructor(activatedRoute, router, _location) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this._location = _location;
        this.labelFirstItem = 'Accueil';
        this.breadcrumbs = [];
    }
    ngOnInit() {
        // subscribe to the NavigationEnd event
        this.router.events.pipe(filter.call(this.router.events, (event) => event instanceof NavigationEnd))
            .subscribe((event) => {
            // set breadcrumbs
            const root = this.activatedRoute.root;
            this.breadcrumbs = this.getBreadcrumbs(root);
        });
    }
    goToPreviousBreadCrumbLevel() {
        // the last element is the current url, the one before is the previous url
        const currentUrlIndex = this.breadcrumbs.length - 2;
        if (currentUrlIndex < 0) {
            this.router.navigate(['']);
        }
        else {
            this.router.navigate([this.breadcrumbs[currentUrlIndex].url]);
        }
    }
    getBreadcrumbs(route, path = '', breadcrumbs = []) {
        // get the child routes
        const children = route.children;
        const BREADCRUMB_NAME = 'pageTitle';
        const BREADCRUMB_DISPLAY = 'breadcrumb';
        // iterate over each children
        if (children.length > 0) {
            for (const child of children) {
                // verify primary route
                if (child.outlet !== PRIMARY_OUTLET) {
                    continue;
                }
                // get the route's URL segment
                const routeURL = child.snapshot.url.map((segment) => segment.path).join('/');
                const display = !child.snapshot.data.hasOwnProperty(BREADCRUMB_DISPLAY) || child.snapshot.data[BREADCRUMB_DISPLAY];
                // verify the custom data property "breadcrumb" is specified on the route
                if (display && child.snapshot.data.hasOwnProperty(BREADCRUMB_NAME) && child.component !== undefined) {
                    // append route URL to URL
                    path += `/${routeURL}`;
                    // add breadcrumb
                    const breadcrumb = {
                        label: child.snapshot.data[BREADCRUMB_NAME],
                        url: path
                    };
                    breadcrumbs.push(breadcrumb);
                }
                return this.getBreadcrumbs(child, path, breadcrumbs);
            }
        }
        // we should never get here, but just in case
        return breadcrumbs;
    }
}
BreadcrumbComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: BreadcrumbComponent, deps: [{ token: i1.ActivatedRoute }, { token: i1.Router }, { token: i2.Location }], target: i0.ɵɵFactoryTarget.Component });
BreadcrumbComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.0", type: BreadcrumbComponent, selector: "lib-breadcrumb", inputs: { labelFirstItem: "labelFirstItem" }, ngImport: i0, template: "<nav aria-label=\"breadcrumb\">\n  <ol class=\"breadcrumb\">\n    <li class=\"breadcrumb-item\" *ngIf=\"breadcrumbs.length > 0\" >\n        <a class=\"fleche-back d-flex align-items-center\" [hidden]=\"breadcrumbs.length === 0\" (click)=\"goToPreviousBreadCrumbLevel()\"><i class=\"icon-b_left_arrow\"></i></a>\n    </li>\n    <li class=\"breadcrumb-item\">\n        <a class=\"underline\" [hidden]=\"breadcrumbs.length === 0\" routerLink=\"\"><u>{{ labelFirstItem }}</u></a>\n        <span [hidden]=\"breadcrumbs.length > 0\"></span>\n    </li>\n    <li class=\"breadcrumb-item\" [ngClass]=\"{ 'active': last}\" *ngFor=\"let breadcrumb of breadcrumbs;  let last = last\">\n        <a [hidden]=\"last\" [routerLink]=\"[breadcrumb.url]\" class=\"underline\"><u>{{breadcrumb.label }}</u></a>\n        <span [hidden]=\"!last\">{{breadcrumb.label }}</span>\n    </li>\n  </ol>\n</nav>\n", styles: [".breadcrumb{background-color:transparent;font-size:1.214rem;line-height:1.786rem}.breadcrumb .icon-fleche_g_d:before{color:#dd3810}.breadcrumb .icon-fleche_g_d{transform:rotate(180deg)}.breadcrumb-item{display:block}.breadcrumb-item+.breadcrumb-item:before{content:none}.breadcrumb-item+.breadcrumb-item{padding:0}.breadcrumb-item+.breadcrumb-item:nth-child(n+3):before{content:\" > \";color:#000;white-space:pre;padding:0}.breadcrumb-item a{color:#2462bc}.breadcrumb-item+.active{color:#000}.breadcrumb-item:first-child{height:1.214rem}.breadcrumb-item:nth-child(2){padding-left:1rem!important}.fleche-back{text-decoration:none!important}.fleche-back .icon-b_left_arrow:before{color:#dd3810;font-size:1.857rem}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo", "routerLink"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: BreadcrumbComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-breadcrumb', template: "<nav aria-label=\"breadcrumb\">\n  <ol class=\"breadcrumb\">\n    <li class=\"breadcrumb-item\" *ngIf=\"breadcrumbs.length > 0\" >\n        <a class=\"fleche-back d-flex align-items-center\" [hidden]=\"breadcrumbs.length === 0\" (click)=\"goToPreviousBreadCrumbLevel()\"><i class=\"icon-b_left_arrow\"></i></a>\n    </li>\n    <li class=\"breadcrumb-item\">\n        <a class=\"underline\" [hidden]=\"breadcrumbs.length === 0\" routerLink=\"\"><u>{{ labelFirstItem }}</u></a>\n        <span [hidden]=\"breadcrumbs.length > 0\"></span>\n    </li>\n    <li class=\"breadcrumb-item\" [ngClass]=\"{ 'active': last}\" *ngFor=\"let breadcrumb of breadcrumbs;  let last = last\">\n        <a [hidden]=\"last\" [routerLink]=\"[breadcrumb.url]\" class=\"underline\"><u>{{breadcrumb.label }}</u></a>\n        <span [hidden]=\"!last\">{{breadcrumb.label }}</span>\n    </li>\n  </ol>\n</nav>\n", styles: [".breadcrumb{background-color:transparent;font-size:1.214rem;line-height:1.786rem}.breadcrumb .icon-fleche_g_d:before{color:#dd3810}.breadcrumb .icon-fleche_g_d{transform:rotate(180deg)}.breadcrumb-item{display:block}.breadcrumb-item+.breadcrumb-item:before{content:none}.breadcrumb-item+.breadcrumb-item{padding:0}.breadcrumb-item+.breadcrumb-item:nth-child(n+3):before{content:\" > \";color:#000;white-space:pre;padding:0}.breadcrumb-item a{color:#2462bc}.breadcrumb-item+.active{color:#000}.breadcrumb-item:first-child{height:1.214rem}.breadcrumb-item:nth-child(2){padding-left:1rem!important}.fleche-back{text-decoration:none!important}.fleche-back .icon-b_left_arrow:before{color:#dd3810;font-size:1.857rem}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }, { type: i2.Location }]; }, propDecorators: { labelFirstItem: [{
                type: Input
            }] } });

class BreadcrumbModule {
}
BreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: BreadcrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
BreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.1.0", ngImport: i0, type: BreadcrumbModule, declarations: [BreadcrumbComponent], imports: [CommonModule,
        RouterModule], exports: [BreadcrumbComponent] });
BreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: BreadcrumbModule, imports: [CommonModule,
        RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: BreadcrumbModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        RouterModule
                    ],
                    declarations: [BreadcrumbComponent],
                    exports: [BreadcrumbComponent]
                }]
        }] });

/*
 * Public API Surface of breadcrumb
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BreadcrumbComponent, BreadcrumbModule, BreadcrumbService };
//# sourceMappingURL=acoss-breadcrumb-angular-intranet.mjs.map
