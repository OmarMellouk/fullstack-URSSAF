{"ast":null,"code":"import { ToastCategoryEnum } from '@app/fullstack-components/notes/services/notes.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/fullstack-components/notes/services/notes.service\";\nexport class TableauErrorsService {\n  constructor(notesService) {\n    this.notesService = notesService;\n  }\n  /**\r\n   * Vérifie si le formulaire des cellules en éditions est en erreur\r\n   * En cas d'erreur, la sauvegarde n'est pas possible, le formulaire est marqué comme édité afin de voir toutes les erreurs\r\n   * Si il n'y a pas d'erreurs, vérifie s'il faut vérifier les erreurs asynchrones\r\n   * Sinon sauvegarde ou annule l'édition\r\n   */\n\n\n  checkErrors(cancel, gridOptions, handleAsyncErrors, saveEdition) {\n    let stopEdition = false;\n    this.notesService.removeAllStatic();\n\n    if (!cancel) {\n      // Vérifie s'il y a des erreurs dans les cellules en éditions\n      const hasError = this.checkFormsValidities(gridOptions);\n\n      if (!hasError) {\n        // S'il n'y a pas d'erreur et qu'il faut vérifier les erreurs asynchrones\n        if (handleAsyncErrors) {\n          this.checkAsynchronousErrors(gridOptions, saveEdition);\n        } else {\n          // Sinon on peut arrêter l'édition\n          stopEdition = true;\n        }\n      }\n    } else {\n      // Sinon on peut arrêter l'édition\n      stopEdition = true;\n    }\n\n    return stopEdition;\n  }\n  /**\r\n   * Vérifie si des cellules ayant un formulaire sont en erreurs\r\n   */\n\n\n  checkFormsValidities(gridOptions) {\n    let hasError = false;\n    gridOptions.api.getCellRendererInstances().forEach(cellInstance => {\n      var _a;\n\n      if ((_a = cellInstance.form) === null || _a === void 0 ? void 0 : _a.invalid) {\n        cellInstance.form.markAsDirty();\n        hasError = true;\n      }\n    });\n    return hasError;\n  }\n  /**\r\n   * Récupère les données ayant un formulaire (donc modifiable) et les renvoient au composent parent pour analyse\r\n   */\n\n\n  checkAsynchronousErrors(gridOptions, saveEdition) {\n    const toSend = new Map();\n    gridOptions.api.getCellRendererInstances().forEach(cellInstance => {\n      if (cellInstance.isEditing && cellInstance.form) {\n        const indexValue = toSend.get(cellInstance.rowIndex);\n\n        if (indexValue) {\n          toSend.set(cellInstance.rowIndex, Object.assign(Object.assign({}, indexValue), cellInstance.form.getRawValue()));\n        } else {\n          toSend.set(cellInstance.rowIndex, cellInstance.form.getRawValue());\n        }\n      }\n    });\n    saveEdition.emit(toSend);\n  }\n  /**\r\n   * Affiche les erreurs asynchrones pour les cellules ayant une formKey\r\n   */\n\n\n  displayAsynchronousErrors(gridOptions, errors) {\n    var _a;\n\n    (_a = gridOptions.api) === null || _a === void 0 ? void 0 : _a.getCellRendererInstances().forEach(cellInstance => {\n      // Parcours les erreurs asynchrones\n      errors.forEach(error => {\n        var _a; // Affiche l'erreur pour la cellule correspondante\n\n\n        if (error.formKey === ((_a = cellInstance.params) === null || _a === void 0 ? void 0 : _a.formKey) && cellInstance.rowIndex === error.index) {\n          cellInstance.form.get(cellInstance.params.formKey).setErrors({\n            isError: error.isError,\n            message: error.message\n          });\n        }\n      });\n    }); // Affiche une note d'erreur\n\n    this.notesService.showStatic({\n      title: errors.length === 1 ? 'Saisie invalide. Un champ est en erreur : ' + errors[0].message : 'Saisie invalide. Plusieurs champs sont en erreur, veuillez survoler l\\'icône d\\'erreur des champs concernés pour plus de détails.',\n      classname: 'note-erreur',\n      hideClose: true,\n      category: ToastCategoryEnum.ERROR\n    });\n  }\n\n}\n\nTableauErrorsService.ɵfac = function TableauErrorsService_Factory(t) {\n  return new (t || TableauErrorsService)(i0.ɵɵinject(i1.NotesService));\n};\n\nTableauErrorsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TableauErrorsService,\n  factory: TableauErrorsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/AC75098185/dev/fullstack-spa-intranet/src/app/fullstack-components/tableau/services/tableau-errors.service.ts"],"names":["ToastCategoryEnum","i0","i1","TableauErrorsService","constructor","notesService","checkErrors","cancel","gridOptions","handleAsyncErrors","saveEdition","stopEdition","removeAllStatic","hasError","checkFormsValidities","checkAsynchronousErrors","api","getCellRendererInstances","forEach","cellInstance","_a","form","invalid","markAsDirty","toSend","Map","isEditing","indexValue","get","rowIndex","set","Object","assign","getRawValue","emit","displayAsynchronousErrors","errors","error","formKey","params","index","setErrors","isError","message","showStatic","title","length","classname","hideClose","category","ERROR","ɵfac","TableauErrorsService_Factory","t","ɵɵinject","NotesService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { ToastCategoryEnum } from '@app/fullstack-components/notes/services/notes.service';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@app/fullstack-components/notes/services/notes.service\";\r\nexport class TableauErrorsService {\r\n    constructor(notesService) {\r\n        this.notesService = notesService;\r\n    }\r\n    /**\r\n     * Vérifie si le formulaire des cellules en éditions est en erreur\r\n     * En cas d'erreur, la sauvegarde n'est pas possible, le formulaire est marqué comme édité afin de voir toutes les erreurs\r\n     * Si il n'y a pas d'erreurs, vérifie s'il faut vérifier les erreurs asynchrones\r\n     * Sinon sauvegarde ou annule l'édition\r\n     */\r\n    checkErrors(cancel, gridOptions, handleAsyncErrors, saveEdition) {\r\n        let stopEdition = false;\r\n        this.notesService.removeAllStatic();\r\n        if (!cancel) {\r\n            // Vérifie s'il y a des erreurs dans les cellules en éditions\r\n            const hasError = this.checkFormsValidities(gridOptions);\r\n            if (!hasError) {\r\n                // S'il n'y a pas d'erreur et qu'il faut vérifier les erreurs asynchrones\r\n                if (handleAsyncErrors) {\r\n                    this.checkAsynchronousErrors(gridOptions, saveEdition);\r\n                }\r\n                else {\r\n                    // Sinon on peut arrêter l'édition\r\n                    stopEdition = true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Sinon on peut arrêter l'édition\r\n            stopEdition = true;\r\n        }\r\n        return stopEdition;\r\n    }\r\n    /**\r\n     * Vérifie si des cellules ayant un formulaire sont en erreurs\r\n     */\r\n    checkFormsValidities(gridOptions) {\r\n        let hasError = false;\r\n        gridOptions.api.getCellRendererInstances().forEach((cellInstance) => {\r\n            var _a;\r\n            if ((_a = cellInstance.form) === null || _a === void 0 ? void 0 : _a.invalid) {\r\n                cellInstance.form.markAsDirty();\r\n                hasError = true;\r\n            }\r\n        });\r\n        return hasError;\r\n    }\r\n    /**\r\n     * Récupère les données ayant un formulaire (donc modifiable) et les renvoient au composent parent pour analyse\r\n     */\r\n    checkAsynchronousErrors(gridOptions, saveEdition) {\r\n        const toSend = new Map();\r\n        gridOptions.api.getCellRendererInstances().forEach((cellInstance) => {\r\n            if (cellInstance.isEditing && cellInstance.form) {\r\n                const indexValue = toSend.get(cellInstance.rowIndex);\r\n                if (indexValue) {\r\n                    toSend.set(cellInstance.rowIndex, Object.assign(Object.assign({}, indexValue), cellInstance.form.getRawValue()));\r\n                }\r\n                else {\r\n                    toSend.set(cellInstance.rowIndex, cellInstance.form.getRawValue());\r\n                }\r\n            }\r\n        });\r\n        saveEdition.emit(toSend);\r\n    }\r\n    /**\r\n     * Affiche les erreurs asynchrones pour les cellules ayant une formKey\r\n     */\r\n    displayAsynchronousErrors(gridOptions, errors) {\r\n        var _a;\r\n        (_a = gridOptions.api) === null || _a === void 0 ? void 0 : _a.getCellRendererInstances().forEach((cellInstance) => {\r\n            // Parcours les erreurs asynchrones\r\n            errors.forEach((error) => {\r\n                var _a;\r\n                // Affiche l'erreur pour la cellule correspondante\r\n                if (error.formKey === ((_a = cellInstance.params) === null || _a === void 0 ? void 0 : _a.formKey) && cellInstance.rowIndex === error.index) {\r\n                    cellInstance.form.get(cellInstance.params.formKey).setErrors({ isError: error.isError, message: error.message });\r\n                }\r\n            });\r\n        });\r\n        // Affiche une note d'erreur\r\n        this.notesService.showStatic({\r\n            title: errors.length === 1 ?\r\n                'Saisie invalide. Un champ est en erreur : ' + errors[0].message :\r\n                'Saisie invalide. Plusieurs champs sont en erreur, veuillez survoler l\\'icône d\\'erreur des champs concernés pour plus de détails.',\r\n            classname: 'note-erreur',\r\n            hideClose: true,\r\n            category: ToastCategoryEnum.ERROR\r\n        });\r\n    }\r\n}\r\nTableauErrorsService.ɵfac = function TableauErrorsService_Factory(t) { return new (t || TableauErrorsService)(i0.ɵɵinject(i1.NotesService)); };\r\nTableauErrorsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: TableauErrorsService, factory: TableauErrorsService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}