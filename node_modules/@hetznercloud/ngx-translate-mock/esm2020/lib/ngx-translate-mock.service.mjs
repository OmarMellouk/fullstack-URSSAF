import { Injectable } from '@angular/core';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { TRANSLATED_STRING } from './util';
import * as i0 from "@angular/core";
export class TranslateServiceMock {
    constructor() {
        this.onLangChangeSubject = new Subject();
        this.onTranslationChangeSubject = new Subject();
        this.onDefaultLangChangeSubject = new Subject();
        this.isLoadedSubject = new BehaviorSubject(true);
        this.onLangChange = this.onLangChangeSubject.asObservable();
        this.onTranslationChange = this.onTranslationChangeSubject.asObservable();
        this.onDefaultLangChange = this.onDefaultLangChangeSubject.asObservable();
        this.isLoaded = this.isLoadedSubject.asObservable();
        this.languages = ['de'];
    }
    get(content) {
        return of(TRANSLATED_STRING + content);
    }
    use(lang) {
        this.currentLang = lang;
        this.onLangChangeSubject.next({ lang });
    }
    addLangs(langs) {
        this.languages = [...this.languages, ...langs];
    }
    getBrowserLang() {
        return '';
    }
    getLangs() {
        return this.languages;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getTranslation() {
        return of({});
    }
    instant(key, interpolateParams) {
        return TRANSLATED_STRING + key.toString();
    }
    setDefaultLang(lang) {
        this.onDefaultLangChangeSubject.next(lang);
    }
}
TranslateServiceMock.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateServiceMock, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TranslateServiceMock.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateServiceMock });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateServiceMock, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXRyYW5zbGF0ZS1tb2NrLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdHJhbnNsYXRlLW1vY2svc3JjL2xpYi9uZ3gtdHJhbnNsYXRlLW1vY2suc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxRQUFRLENBQUM7O0FBRzNDLE1BQU0sT0FBTyxvQkFBb0I7SUFEakM7UUFFSSx3QkFBbUIsR0FBNkIsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM5RCwrQkFBMEIsR0FBb0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM1RCwrQkFBMEIsR0FBb0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM1RCxvQkFBZSxHQUE2QixJQUFJLGVBQWUsQ0FDM0QsSUFBSSxDQUNQLENBQUM7UUFFRixpQkFBWSxHQUNSLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUM1Qyx3QkFBbUIsR0FDZixJQUFJLENBQUMsMEJBQTBCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbkQsd0JBQW1CLEdBQ2YsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ25ELGFBQVEsR0FBd0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUlwRSxjQUFTLEdBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQW1DaEM7SUFqQ0csR0FBRyxDQUFDLE9BQWU7UUFDZixPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsR0FBRyxDQUFDLElBQVk7UUFDWixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFxQixDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFlO1FBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsY0FBYztRQUNWLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELDhEQUE4RDtJQUM5RCxjQUFjO1FBQ1YsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFzQixFQUFFLGlCQUEwQjtRQUN0RCxPQUFPLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRUQsY0FBYyxDQUFDLElBQVk7UUFDdkIsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDOztpSEFwRFEsb0JBQW9CO3FIQUFwQixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFEaEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IExhbmdDaGFuZ2VFdmVudCB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgVFJBTlNMQVRFRF9TVFJJTkcgfSBmcm9tICcuL3V0aWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRlU2VydmljZU1vY2sge1xuICAgIG9uTGFuZ0NoYW5nZVN1YmplY3Q6IFN1YmplY3Q8TGFuZ0NoYW5nZUV2ZW50PiA9IG5ldyBTdWJqZWN0KCk7XG4gICAgb25UcmFuc2xhdGlvbkNoYW5nZVN1YmplY3Q6IFN1YmplY3Q8c3RyaW5nPiA9IG5ldyBTdWJqZWN0KCk7XG4gICAgb25EZWZhdWx0TGFuZ0NoYW5nZVN1YmplY3Q6IFN1YmplY3Q8c3RyaW5nPiA9IG5ldyBTdWJqZWN0KCk7XG4gICAgaXNMb2FkZWRTdWJqZWN0OiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KFxuICAgICAgICB0cnVlXG4gICAgKTtcblxuICAgIG9uTGFuZ0NoYW5nZTogT2JzZXJ2YWJsZTxMYW5nQ2hhbmdlRXZlbnQ+ID1cbiAgICAgICAgdGhpcy5vbkxhbmdDaGFuZ2VTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgIG9uVHJhbnNsYXRpb25DaGFuZ2U6IE9ic2VydmFibGU8c3RyaW5nPiA9XG4gICAgICAgIHRoaXMub25UcmFuc2xhdGlvbkNoYW5nZVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgb25EZWZhdWx0TGFuZ0NoYW5nZTogT2JzZXJ2YWJsZTxzdHJpbmc+ID1cbiAgICAgICAgdGhpcy5vbkRlZmF1bHRMYW5nQ2hhbmdlU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgICBpc0xvYWRlZDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuaXNMb2FkZWRTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgY3VycmVudExhbmchOiBzdHJpbmc7XG5cbiAgICBsYW5ndWFnZXM6IHN0cmluZ1tdID0gWydkZSddO1xuXG4gICAgZ2V0KGNvbnRlbnQ6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBvZihUUkFOU0xBVEVEX1NUUklORyArIGNvbnRlbnQpO1xuICAgIH1cblxuICAgIHVzZShsYW5nOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TGFuZyA9IGxhbmc7XG4gICAgICAgIHRoaXMub25MYW5nQ2hhbmdlU3ViamVjdC5uZXh0KHsgbGFuZyB9IGFzIExhbmdDaGFuZ2VFdmVudCk7XG4gICAgfVxuXG4gICAgYWRkTGFuZ3MobGFuZ3M6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgICAgIHRoaXMubGFuZ3VhZ2VzID0gWy4uLnRoaXMubGFuZ3VhZ2VzLCAuLi5sYW5nc107XG4gICAgfVxuXG4gICAgZ2V0QnJvd3NlckxhbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGdldExhbmdzKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGFuZ3VhZ2VzO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZ2V0VHJhbnNsYXRpb24oKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIG9mKHt9KTtcbiAgICB9XG5cbiAgICBpbnN0YW50KGtleTogc3RyaW5nIHwgc3RyaW5nW10sIGludGVycG9sYXRlUGFyYW1zPzogb2JqZWN0KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFRSQU5TTEFURURfU1RSSU5HICsga2V5LnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgc2V0RGVmYXVsdExhbmcobGFuZzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMub25EZWZhdWx0TGFuZ0NoYW5nZVN1YmplY3QubmV4dChsYW5nKTtcbiAgICB9XG59XG4iXX0=