import * as i0 from '@angular/core';
import { Directive, Input, Injectable, Pipe, NgModule } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Subject, BehaviorSubject, of } from 'rxjs';

const TRANSLATED_STRING = 'i18n';

/* eslint-disable @typescript-eslint/no-explicit-any */
class TranslateMockDirective {
    constructor(_element) {
        this._element = _element;
    }
    ngAfterViewChecked() {
        this._element.nativeElement.innerText += TRANSLATED_STRING;
    }
}
TranslateMockDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateMockDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TranslateMockDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.2", type: TranslateMockDirective, selector: "[translate]", inputs: { translateParams: "translateParams" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateMockDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[translate]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { translateParams: [{
                type: Input
            }] } });

class TranslateServiceMock {
    constructor() {
        this.onLangChangeSubject = new Subject();
        this.onTranslationChangeSubject = new Subject();
        this.onDefaultLangChangeSubject = new Subject();
        this.isLoadedSubject = new BehaviorSubject(true);
        this.onLangChange = this.onLangChangeSubject.asObservable();
        this.onTranslationChange = this.onTranslationChangeSubject.asObservable();
        this.onDefaultLangChange = this.onDefaultLangChangeSubject.asObservable();
        this.isLoaded = this.isLoadedSubject.asObservable();
        this.languages = ['de'];
    }
    get(content) {
        return of(TRANSLATED_STRING + content);
    }
    use(lang) {
        this.currentLang = lang;
        this.onLangChangeSubject.next({ lang });
    }
    addLangs(langs) {
        this.languages = [...this.languages, ...langs];
    }
    getBrowserLang() {
        return '';
    }
    getLangs() {
        return this.languages;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getTranslation() {
        return of({});
    }
    instant(key, interpolateParams) {
        return TRANSLATED_STRING + key.toString();
    }
    setDefaultLang(lang) {
        this.onDefaultLangChangeSubject.next(lang);
    }
}
TranslateServiceMock.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateServiceMock, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TranslateServiceMock.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateServiceMock });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateServiceMock, decorators: [{
            type: Injectable
        }] });

class TranslateMockPipe {
    transform(text) {
        return !text ? TRANSLATED_STRING : `${text}-${TRANSLATED_STRING}`;
    }
}
TranslateMockPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateMockPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TranslateMockPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateMockPipe, name: "translate" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateMockPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'translate' }]
        }] });

/**
 * Copyright (c) 2022 Hetzner Cloud GmbH
 *
 * SPDX-License-Identifier: MIT
 */
const TRANSLATE_SERVICE_MOCK = {
    provide: TranslateService,
    useClass: TranslateServiceMock,
};
class TranslateMockModule {
}
TranslateMockModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateMockModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TranslateMockModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateMockModule, declarations: [TranslateMockPipe, TranslateMockDirective], exports: [TranslateMockPipe, TranslateMockDirective] });
TranslateMockModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateMockModule, providers: [TRANSLATE_SERVICE_MOCK] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TranslateMockModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TranslateMockPipe, TranslateMockDirective],
                    exports: [TranslateMockPipe, TranslateMockDirective],
                    providers: [TRANSLATE_SERVICE_MOCK],
                }]
        }] });

/*
 * Public API Surface of ngx-translate-mock
 */

/**
 * Generated bundle index. Do not edit.
 */

export { TRANSLATED_STRING, TRANSLATE_SERVICE_MOCK, TranslateMockDirective, TranslateMockModule, TranslateMockPipe, TranslateServiceMock };
